[{"browse":"Android","content":"  Material You graphic from Material.io  Android 13 Tiramisu is a couple of months away from a full stable release and only last year did Google introduce Material You with Android 12/12L, changing their material design guidelines for the third time.\nMaterial You is the latest iteration of Google\u0026rsquo;s design system for Android, it focuses on providing a personalized feel to the user by using system-wide dynamic theming, generating richer tonal palettes, and improving the overall user experience between the Android system UI and third-party apps.\n In this article, we will explore the Android framework and changes introduced with Monet to understand how dynamic theming works under the hood and fuels the new Material You design.\nTable of Content  What is Monet? Exploring the Android framework  System UI \u0026amp; Monet Theme overlay controller Wallpaper manager \u0026amp; wallpaper manager service Listening to changes in system wallpaper Extracting colors from the wallpaper Variance in color extraction algorithms K-Means \u0026amp; Celebi quantizers Palettes and Swatches Identifying dominant colors Re-evaluating system theme Monet color scheme Theme overlay applier   Material You Further reading \u0026amp; references Attributions \u0026amp; credits   What is Monet? Android 12/12L adds support for dynamic themes a.k.a. Monet. Monet as a term is a codename for a subset of changes within the Android framework, primarily in the System-UI which allows dynamic theming.\n Monet is most likely named after the French painter Claude Monet.\n With Monet, Tiramisu and UpsideDownCake, it\u0026rsquo;s good to be back in the fancy Android naming world!\nParts of the logic that encompass Monet were first added in Android 12 and were only available on Pixel devices (6 and 6 Pro), with the 12L release we see the remaining components added to AOSP.\nSo what exactly is dynamic theming?\n A gif from Material Theme Builder  Let\u0026rsquo;s say if you set a new wallpaper on Android 12/12L, the system contains a color extraction logic within the framework which will generate tonal palettes and swatches that you can avail for your apps, thus enabling a more uniform look between the Android system UI and your application.\n Exploring the Android framework With a bit of prelude on Material You, we can talk about changes in the Android framework with Monet and understand the entire pipeline where a user selects a wallpaper and the system dynamically adapts to new colors.\n While we take a walkthrough of System UI and the logic that forms Monet, I will also slightly explore some other interesting aspects of the framework.\nThe outline of the logic is simple\n Events when the user sets a new wallpaper System reacting to the change Color extraction, palette generation Refreshing the system context with new colors  System UI \u0026amp; Monet Changes made in the framework that form what we call dynamic system theming are largely a part of System-UI with other components from the graphic package which enable major portions of color extraction logic.\nAnd like all good things, Monet is hidden behind a feature flag.\n frameworks/base/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java\n  mIsMonetEnabled = featureFlags.isMonetEnabled(); As we continue our deep dive we will take a look at the following parts of the Android framework\n ThemeOverlayController.java WallpaperManagerService.java WallpaperColors.java  Theme Overlay Controller The ThemeOverlayController.java from the System UI package of the framework contains the bulk of the logic for determining events that affect dynamic theming. It prepares the theme colors initially when the system boots.\n frameworks/base/core/java/android/app/WallpaperManager.java\n  public interface OnColorsChangedListener { void onColorsChanged(WallpaperColors colors, int which); void onColorsChanged(WallpaperColors colors, int which, int userId) } First things first, the color change listener of the WallpaperManager is a simple interface that contains two overloaded functions to notify that the colors have changed. There could be two or more user profiles active on the device and each of the users could have a different wallpaper set, so the framework needs to take into consideration a multi-user situation and only update the colors specific to the user.\nThe start() method of the overlay controller, first upon device boot, extracts the latest colors from the wallpaper via the WallpaperManagerService and applies them to the System-UI.\n frameworks/base/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java\n  @Override public void start() { ... // Do nothing if monet is disabled  if (!mIsMonetEnabled) { return; } ... // Upon boot, make sure we have the most up to date colors  Runnable updateColors = () -\u0026gt; { WallpaperColors systemColor = mWallpaperManager.getWallpaperColors( getLatestWallpaperType(mUserTracker.getUserId())); Runnable applyColors = () -\u0026gt; { if (DEBUG) Log.d(TAG, \u0026#34;Boot colors: \u0026#34; + systemColor); mCurrentColors.put(mUserTracker.getUserId(), systemColor); reevaluateSystemTheme(false /* forceReload */); }; if (mDeviceProvisionedController.isCurrentUserSetup()) { mMainExecutor.execute(applyColors); } else { applyColors.run(); } };  A quick tip: You can click on the file paths mentioned above code snippets and view the entire source hosted on the Android Super project.\n Two important functions from the above snippet are getWallpaperColors() and reevaluateSystemTheme(), Let\u0026rsquo;s explore each of them in detail.\nWallpaper Manager \u0026amp; Wallpaper Manager Service We will now need to look into how exactly the system listens to changes in the wallpaper and changes in the dynamic colors. We start with two important components of this logic, one is the WallpaperManager and the second is the WallpaperManagerService.\n frameworks/base/core/java/android/app/WallpaperManager.java\n  Aptly named, the wallpaper manager is responsible for connecting to the system wallpaper service and utilizes the service to set up observers for changes in the wallpaper and its colors and react to its events.\nStep 1: Listening to Changes in Wallpaper The service contains a wallpaper observer, which simply checks if the wallpaper file has changed and triggers sub-routines for color extraction and theme re-evaluation.\n frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java\n  class WallpaperObserver extends FileObserver { ... final boolean sysWallpaperChanged = (mWallpaperFile.equals(changedFile)); final boolean lockWallpaperChanged = (mWallpaperLockFile.equals(changedFile)); ... // Based on a bunch of conditionals some of the below functions are called  notifyLockWallpaperChanged(); notifyWallpaperColorsChanged(wallpaper, FLAG_LOCK); notifyWallpaperChanged(wallpaper); } If we look into one of the above functions and its implementation we\u0026rsquo;ll see that the logic takes into consideration a multi-display scenario. For example, foldable devices or a multi-display device that contains two or more displays. Hence we could have a live wallpaper that supports multiple displays and can contain separate logic for per display surface rendering of the wallpaper or just two separate wallpapers for the home screen and the lock screen.\nThe color extraction logic needs to be aware of this, hence we find a DisplayConnector which is displayId specific. Our notifier logic runs through a custom iterator for display connectors and notifies color change per connection.\n frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java\n  private void notifyWallpaperColorsChanged(@NonNull WallpaperData wallpaper, int which) { ... wallpaper.connection.forEachDisplayConnector(connector -\u0026gt; { notifyWallpaperColorsChangedOnDisplay(wallpaper, which, connector.mDisplayId); }); ... } Step 2: Extracting Wallpaper Colors The getWallpaperColors() function extracts user-specific wallpaper data and determines if colors can be extracted or not.\n frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java\n  public WallpaperColors getWallpaperColors(int which, int userId, int displayId) throws RemoteException { ... shouldExtract = wallpaperData.primaryColors == null; if (shouldExtract) { extractColors(wallpaperData); } return wallpaperData.primaryColors; } The extractColors() function of the service is responsible for taking the wallpaper data, reading the user-specific wallpaper file, and creating a downscaled bitmap of it before color extraction.\nVariance in Color Extraction Algorithms The first step of color extraction that Monet relies on is the calculation of the wallpaper bitmap size. If the bitmap size is greater than the hardcoded limit, a downscale of the bitmap is required before color swatches can be extracted. We don\u0026rsquo;t want to process an image larger than it needs to be, possibly saving some computation time and resource while still maintaining the effectiveness of the color extraction algorithm from the image sample.\n frameworks/base/core/java/android/app/WallpaperColors.java\n  private static final int MAX_BITMAP_SIZE = 112; private static final int MAX_WALLPAPER_EXTRACTION_AREA = MAX_BITMAP_SIZE * MAX_BITMAP_SIZE; final int bitmapArea = bitmap.getWidth() * bitmap.getHeight(); if (bitmapArea \u0026gt; MAX_WALLPAPER_EXTRACTION_AREA) { Size optimalSize = calculateOptimalSize(bitmap.getWidth(), bitmap.getHeight()); bitmap = Bitmap.createScaledBitmap(bitmap, optimalSize.getWidth(), optimalSize.getHeight(), true /* filter */); } Post resizing of the bitmap (if required), we move on to extracting the palette from the bitmap. The extraction logic takes into account if the device is a low RAM device based on build config and uses appropriate quantization logic to extract the palette for efficient performance.\n frameworks/base/core/java/android/app/WallpaperColors.java\n  final Palette palette; if (ActivityManager.isLowRamDeviceStatic()) { palette = Palette .from(bitmap, new VariationalKMeansQuantizer()) .maximumColorCount(5) .resizeBitmapArea(MAX_WALLPAPER_EXTRACTION_AREA) .generate(); } else { palette = Palette .from(bitmap, new CelebiQuantizer()) .maximumColorCount(256) .resizeBitmapArea(MAX_WALLPAPER_EXTRACTION_AREA) .generate(); } Makefiles define if the device is low ram!\nIf you have ever built Android from scratch and compiled AOSP, you probably know that we use .mk or makefiles to instruct the build system/toolchain about the build configuration of the device you are trying to compile Android for.\nThe value indicating if device is a Low RAM device is a hard coded static value supplied from build makefile for the device. Take a look at the build file for Pixel 4a for reference:\n /device/google/sunfish/device-common.mk\n  # Set lmkd options PRODUCT_PRODUCT_PROPERTIES += \\ \tro.config.low_ram = false \\ \tro.lmk.log_stats = true \\  frameworks/base/core/java/com/android/internal/os/RoSystemProperties.java\n  public static final boolean CONFIG_LOW_RAM = SystemProperties.getBoolean(\u0026#34;ro.config.low_ram\u0026#34;, false); This value is provided by the ActivityManager.\n frameworks/base/core/java/android/app/ActivityManager.java\n  /** * Returns true if this is a low-RAM device. Exactly whether a device is low-RAM * is ultimately up to the device configuration, but currently it generally means * something with 1GB or less of RAM. This is mostly intended to be used by apps * to determine whether they should turn off certain features that require more RAM. */ public boolean isLowRamDevice() { return isLowRamDeviceStatic(); } The key takeaway from the above is that the Android system may use different logic based on system resource constraints, in our case the color extraction algorithm.\nK-Means \u0026amp; Celebi Quantizers To understand it simply, a quantizer/quantization algorithm or a clustering algorithm is used to extract dominant values from a set of values. For our color extraction logic, this set of values comes from our image which is the wallpaper.\nThis wallpaper, (or any image for that matter) consists of pixels of various colors arranged in specific ways, that together constitute an image.\nOur color quantizer thus needs to identify dominant portions of these sets of pixels that share the same color and cluster them together so that we can extract meaningful information from the image.\nAndroid framework relies on two algorithms\n Variational K-means clustering Celebi K-means clustering   Finding dominant colors using K-means by Ailephant.com  Read more about the Color quantization K means algorithm used in Android 12.\nThe K Means algorithm largely works on identifying clusters in an image but is not the most effective when extracting colors.\nM Emre Celebi\u0026rsquo;s paper improved the performance and effectiveness of the K-Means quantizer in their paper published in 2011.\nSo if you are using any device that has over 1 gigabyte of RAM and it is running Android 12/12L or Tiramisu, Monet will use the Celebi quantizer to extract colors from your wallpaper.\nBoth the above quantizers are a part of AOSP and can be found at\n frameworks/base/core/java/com/android/internal/graphics/palette/CelebiQuantizer.java\n   frameworks/base/core/java/com/android/internal/graphics/palette/VariationalKMeansQuantizer.java\n  Palettes and Swatches Let us now understand what a swatch is and what a palette is.\nA swatch consists of a color. Many swatches form a palette. The population of a swatch is the number of pixels the color of the swatch represents. The higher the number of pixels of a certain color in the wallpaper, the higher the population value of the swatch.\n The population of a swatch is an important factor in determining the dominant colors of the wallpaper, the higher the population of the swatch, the higher the chances that the color will become the dominant color of the theme.\n frameworks/base/core/java/com/android/internal/graphics/palette/Palette.java\n  public static class Swatch { private final Color mColor; private final int mPopulation; ... } public final class Palette { private final List\u0026lt;Swatch\u0026gt; mSwatches; private final Swatch mDominantSwatch; ... } Step 3: Identifying dominant colors Once our wallpaper is run through the quantization logic, we end up with a list of swatches or colors. This list of swatches now needs to be sorted by their population value to identify the dominant colors from the image.\nThe final container is a HashMap key-value pair which consists of swatch color and population count, encapsulated within a WallpaperColors object before forwarding it back to System-UIs theme overlay controller.\n frameworks/base/core/java/android/app/WallpaperColors.java\n  final ArrayList\u0026lt;Palette.Swatch\u0026gt; swatches = new ArrayList\u0026lt;\u0026gt;(palette.getSwatches()); swatches.sort((a, b) -\u0026gt; b.getPopulation() - a.getPopulation()); final int swatchesSize = swatches.size(); final Map\u0026lt;Integer, Integer\u0026gt; populationByColor = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; swatchesSize; i++) { Palette.Swatch swatch = swatches.get(i); int colorInt = swatch.getInt(); populationByColor.put(colorInt, swatch.getPopulation()); } int hints = calculateDarkHints(bitmap); return new WallpaperColors(populationByColor, HINT_FROM_BITMAP | hints); Re-evaluating system theme Let\u0026rsquo;s go back to our Theme Overlay Controller, which registered a wallpaper change listener in its start() method. Every time the user changes a wallpaper, the intent filter filters the wallpaper change intent and passes the newly calculated colors from our wallpaper manager service through the wallpaper change listener.\nThe broadcast receiver within the theme controller listens to the Intent.ACTION_WALLPAPER_CHANGED and triggers conditional flows to re-evaluate the system theme.\nThe wallpaper change listener invokes reevaluateSystemTheme()\n frameworks/base/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java\n  // Intercept wallpaper change intent and changes in system user profiles  private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() { @Override public void onReceive(Context context, Intent intent) { boolean newWorkProfile = Intent.ACTION_MANAGED_PROFILE_ADDED.equals(intent.getAction()); boolean isManagedProfile = mUserManager.isManagedProfile( intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0)); if (newWorkProfile) { ... reevaluateSystemTheme(true /* forceReload */); } else if (Intent.ACTION_WALLPAPER_CHANGED.equals(intent.getAction())) { ... mAcceptColorEvents = true; Log.i(TAG, \u0026#34;Wallpaper changed, allowing color events again\u0026#34;); .. } } }; // color change listener triggering system theme reevaluation  mWallpaperManager.addOnColorsChangedListener((wallpaperColors, which) -\u0026gt; { ... reevaluateSystemTheme(false /* forceReload */); ... }, null, UserHandle.USER_ALL); // Re evaluation logic  private void reevaluateSystemTheme(boolean forceReload) { final WallpaperColors currentColors = mCurrentColors.get(mUserTracker.getUserId()); final int mainColor; final int accentCandidate; if (currentColors == null) { mainColor = Color.TRANSPARENT; accentCandidate = Color.TRANSPARENT; } else { mainColor = getNeutralColor(currentColors); accentCandidate = getAccentColor(currentColors); } ... mMainWallpaperColor = mainColor; mWallpaperAccentColor = accentCandidate; // Extract colors from palette according to M3 specs  if (mIsMonetEnabled) { mSecondaryOverlay = getOverlay(mWallpaperAccentColor, ACCENT); mNeutralOverlay = getOverlay(mMainWallpaperColor, NEUTRAL); mNeedsOverlayCreation = true; } // Overlay Manager \u0026amp; overlay manager service will update specific packages  updateThemeOverlays(); } Monet Color Schemes A color scheme typed entity encapsulates the colors generated by above logic from the getOverlay() method. It is the class that calculates the required color values in definition of the Material You specs, we use the WallpaperColors class that contains the extracted colors to build the final color scheme.\n frameworks/base/packages/SystemUI/monet/src/com/android/systemui/monet/ColorScheme.kt\n  public class ColorScheme(@ColorInt seed: Int, val darkTheme: Boolean) { val accent1: List\u0026lt;Int\u0026gt; val accent2: List\u0026lt;Int\u0026gt; val accent3: List\u0026lt;Int\u0026gt; val neutral1: List\u0026lt;Int\u0026gt; val neutral2: List\u0026lt;Int\u0026gt; constructor(wallpaperColors: WallpaperColors, darkTheme: Boolean): this(getSeedColor(wallpaperColors), darkTheme) ... To calculate the system theme colors, identify dominant swatches and build them according to the required specifications. The class identifies a seed color, maps a score to each swatch, considers hue proportions and ranks them to find the most prominent colors.\n/** * Filters and ranks colors from WallpaperColors. * * @param wallpaperColors Colors extracted from an image via quantization. * @return List of ARGB ints, ordered from highest scoring to lowest. */ @JvmStatic fun getSeedColors(wallpaperColors: WallpaperColors): List\u0026lt;Int\u0026gt;  Theme Overlay Applier This last section would ask of us to step into the overlay manager service to understand how the Android system persists the new overlay information upon re evaluation with new colors. We\u0026rsquo;ll look at specific parts of this logic.\n frameworks/base/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayApplier.java\n  static final List\u0026lt;String\u0026gt; THEME_CATEGORIES = Lists.newArrayList( OVERLAY_CATEGORY_SYSTEM_PALETTE, OVERLAY_CATEGORY_ICON_LAUNCHER, OVERLAY_CATEGORY_SHAPE, OVERLAY_CATEGORY_FONT, OVERLAY_CATEGORY_ACCENT_COLOR, OVERLAY_CATEGORY_ICON_ANDROID, OVERLAY_CATEGORY_ICON_SYSUI, OVERLAY_CATEGORY_ICON_SETTINGS, OVERLAY_CATEGORY_ICON_THEME_PICKER); public void applyCurrentUserOverlays( Map\u0026lt;String, OverlayIdentifier\u0026gt; categoryToPackage, FabricatedOverlay[] pendingCreation, int currentUser, Set\u0026lt;UserHandle\u0026gt; managedProfiles) We have a list of categories the applier will run through to apply the new overlay in a given sequence. A map of the category to the overlay identifier is calculated to determine which packages should be updated with the new colors.\nThe applier will utilize the overlay manager and the overlay manager service to update the System UI and packages.\nThus the system will reflect the new dynamically calculated colors based on the user\u0026rsquo;s wallpaper.\n I would love to extend this article and talk in finer detail about how the overlay manager and overlay manager service function, doing so may run us out of the scope of this article. Drop a comment if you’d like to read more about them, perhaps in a separate article..\n  Material You As a result of the above color extraction we end up with colors that have the highest population, and the most prominent colors are extracted from the wallpaper.\nMonet maps the top-most colors/seed colors with the highest rank by the Material You guideline:\n Primary color Secondary color Tertiary color Neutral color Neutral key variant color   Five dominant colors of Material You from Material.io\n 13 tones in varying degrees of opacity are extracted from each of the five core colors and only selective colors are used for Material You.\n Color tonality based on black and white levels from Material.io   We end up with an operating system that is truly invested in enriching the user\u0026rsquo;s experience by allowing the expression of their styles, preferences, and aesthetics. It\u0026rsquo;s perfectly called Material You.\n A promo from Material.io, showcasing Monet in action with Material You  Hope you enjoyed this article and understand the framework a bit more than before, while writing it, I cherry-picked portions of code from the Android framework that I felt were important to give an overview of the entire logic that constitutes Monet. If someone from Google or the framework team by any chance happens to read it, please share your feedback and add to our understanding of Monet where ever applicable!\nThe source changed quite a lot while I researched into this aspect of the framework, in the future, it will change with new builds and releases of the operating system, yet I think the silhouette of how Monet works should remain the same. (for the most part!)\n Further reading \u0026amp; references  Android Superproject for exploring the latest AOSP source. Material 3/You guidelines at Material.io Using K-Means for identifying dominant colors by Ailephant.com More works by ME Celebi XDA: Inclusion of Monet in AOSP with Android 12L  Attributions \u0026amp; Credits  Flaticon for icons Android Developers for Android logo, and other assets. Material.io on imagery for Material You. Sagar Viradiya, Shreyas Patil \u0026amp; Himanshu Singh for proof reading and providing early feedback on the content. 🙌🏼   ","href":"https://siddroid.com/post/android/chasing-monet-inside-the-android-framework/","title":"Chasing Monet inside the Android framework"},{"browse":"Compose ; Android","content":" Dynamic colors with compose-m3   In this article we will quickly learn how to use Jetpack Compose and Material design 3 library to build a theme for your app which uses colors generated by Material You on Android versions 12/12L and above.\nThis article covers:\n Generating Light and Dark themes Leveraging Jetpack Compose for dynamic behaviour Building your first theme Adapting your app to dynamic colors   Table of content  Dynamic colors of the Android system Project dependencies Material theme builder Building light and dark color themes Dynamic theming Preparing your composable theme Footnotes References Attributions   Dynamic colors of the Android system The Android system starting from versions 12/12L now supports what we call dynamic theming. Essentialy as a part of the new user customization centric design experience, the Android framework will now extract colors from the wallpaper set on your device.\n Monet is the logic within the framework that is responsible for color extraction from the wallpaper. It\u0026rsquo;s kind of fascinating to understand how Monet works under the hood, you can read more about the internals of how Monet provides dynamic colors to the Android system.\n Project dependencies To bootstrap the project, let\u0026rsquo;s add the following dependencies to the project for Jetpack compose and material 3.\n// Compose  implementation \u0026#34;androidx.compose.ui:ui:1.1.1\u0026#34; implementation \u0026#34;androidx.compose.ui:ui-tooling-preview:1.1.1\u0026#34; // Material 3  implementation \u0026#34;androidx.compose.material3:material3:1.0.0-alpha10\u0026#34; Compose Material 3 is still in alpha at the time of writing this article.\n Material theme builder If you want the easiest way to use dynamic themes, head over to the site material theme builder. Its a really cool project on Github pages, which will help us get started, without manually preparing the theme files. Further down the article we will take a look at the files generated by the theme builder and also understand how we can manually prepare the theme ourselves.\nOnce you are on the theme builder site, navigate to the custom colors tab, and here we will prepare the base of our Composable theme. You will find options to select core colors of your application, these colors could be the colors that define your brand or application.\n Once you have entered the RGB values, you should be able to export the colors. To export, click on the export option and select Jetpack Compose (Theme.kt).\nThis the easiest way availble right now to kickstart your project with dynamic theming. In the exported files you will find auto-generated Theme.kt, Colors.kt and Typography.kt files.\npackage com.example.compose import androidx.compose.ui.graphics.Color val md_theme_light_primary = Color(0xFF6750A4) val md_theme_light_onPrimary = Color(0xFFFFFFFF) val md_theme_light_primaryContainer = Color(0xFFEADDFF) val md_theme_light_onPrimaryContainer = Color(0xFF21005D) val md_theme_light_secondary = Color(0xFF625B71) val md_theme_light_onSecondary = Color(0xFFFFFFFF) . . . . . Add the files to your project structure under ui/theme package and your are good to start migrating your project colors.\nAlternatively you could just head over to this Github gist for the theme files and add your custom color hexcodes as you see fit.\n Building light and dark color schemes M3 (Material 3) uses what we call as a baseline color scheme to begin with. This baseline color scheme consists of the following colors:\n Primary, Secondary and Tertiary On Primary, Secondary and Tertiary Primary, Secondary and Tertiary container Error, On Error, On Error Container Background, On Background Surface, On Surface and On surface container (Positive and inverse variants) Outline and shadow   Over in all, the baseline currently consists of about 26 colors / tokens for each of the theme variants, light and dark.\nIn our Theme.kt file we will prepare the light and dark composable color schemes. A color scheme is a state aware container class from the M3 library which holds the various colors we saw above.\nimport androidx.compose.material3.dynamicDarkColorScheme import androidx.compose.material3.dynamicLightColorScheme private val LightThemeColors = lightColorScheme( primary = md_theme_light_primary, onPrimary = md_theme_light_onPrimary, . . inversePrimary = md_theme_light_inversePrimary, ) private val DarkThemeColors = darkColorScheme( primary = md_theme_dark_primary, onPrimary = md_theme_dark_onPrimary, . . inversePrimary = md_theme_dark_inversePrimary, ) Full snippet of the above\nThe references to the colors above are the same ones we were able to export from the material theme builder, you can also customize the colors to your app or brands design guideline.\n Dynamic theming Up until now, we have been only looking at M3 library and preparing the colors for our app\u0026rsquo;s theme. Now that we have our M3 light and dark color schemes prepared, lets look at dynamic color schemes.\nThis is the easier part as M3 provides easy functions for accessing dynamic wallpaper colors. The DynamicTonalPalatte of the M3 library, provides TonalPalettes which encapsulate the dynamic system colors. We will use two functions\nfun dynamicDarkColorScheme(context: Context): ColorScheme fun dynamicLightColorScheme(context: Context): ColorScheme  Preparing your composable theme To prepare your app wide theme composable, we need to be mindful of the following:\n Android API support System state (Dark or light mode)  We want our app to be backward compatible and design our theme in a manner that it should support dynamic colors if the API is or above SDK 31 (Android 12). We also need to take into account if the user has enabled or disabled dark mode, either manually or automatically based on time of the day.\n// For checking API support, we could do a simple build SDK version check fun supportsDynamic() : Boolean = Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.S // For checking system dark/light mode state, we use the utility from compose foundation package androidx.compose.foundation @Composable @ReadOnlyComposable fun isSystemInDarkTheme() We can now write our AppTheme composable which wraps our entire UI, we use the above functions to check API support and enable or disable dynamic theming if SDK version in above 31 (Android 12). We also switch the color schemes to the darker palette if the system is in dark mode.\n/** * App-wide dynamic theme * @param content [Composable] UI */ @Composable fun AppTheme(content: @Composable() () -\u0026gt; Unit) { val inDarkMode: Boolean = isSystemInDarkTheme() val colors = if (supportsDynamic()) { val context = LocalContext.current if (inDarkMode) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context) } else { if (inDarkMode) DarkThemeColors else LightThemeColors } MaterialTheme( colorScheme = colors, typography = AppTypography, content = content ) } To use your theme, simply call it at the top layer / level of your screen\nsetContent { AppTheme { HomeScreen() } }  Footnotes We have learnt how to leverage M3 components, Jetpack compose and utilize the APIs on Android 12/12L and Tiramisu to build an app wide theme. 🙌🏼 🎉\n A sample of material 3 components from material.io  Hope you found this article helpful, if so do share it and add any feedback or questions you may have in the comments below. Cheers!\n References  M3 Color system and baselines M3 builder Code lab for XML version of migration to M3 Compose release notes M3 release notes  Attributions  Images from Material.io   ","href":"https://siddroid.com/post/compose/dynamic-themes-with-compose-and-material-3/","title":"Dynamic themes with Compose and Material 3"},{"browse":"Community","content":"   Event Details We kickstart 2022 at Android Worldwide with a two days session on January 25th \u0026amp; 26th. This quarter we cover different topics ranging from managing memory at multiplatform level with Kotlin, maxing out the performance of your SQLite database, implementing FTS for faster querying and much more!\nOur speakers for January 2022\n Anna Zharkova Rashyanjyot Arora Kshitij Chauhan William Shelor Gema Rodriguez Ed George Sierra OBryan Mohit Sarveiya Ryan Kay Gabor Varadi  Visit our website at Android Worldwide\nWe are a collective of about 30 communities around the world, focusing on Android development and modern development practices.\n Participating communities    \u0026ndash; \u0026ndash; \u0026ndash;     Android Budapest Android Developer Group Poznan Android Serbia   AndroidHeads Vienna DC Android Denver Droids   GDG Android Columbus GDG Boston Android GDG Bronx   GDG Capital Region GDG Córdoba Argentina GDG Fresno   GDG Helwan GDG Kolachi GDG Los Angeles   GDG Los Angeles Android GDG Montreal GDG Mumbai   GDG Nagpur GDG New York City GDG Osijek   GDG Phoenix GDG Tbilisi GDG Toronto Android   GDG Washington Kotlin Mumbai New York Android Developers   Kotlin Hyderabad \u0026ndash; \u0026ndash;     Kotlin Multiplatform. Memory management old and new way with Anna Zharkova Abstract: The main idea of Kotlin Multiplatform, as well as other cross-platform SDKs, is to optimize development by writing code once and share it between different platforms. However, dealing with a common code base could have some nuances that should be figured out and solved according to the platform specifics. And implementation in a common base could be really tricky. One such moment is dealing with memory management, multithreading and concurrency. KMM SDK uses the specific for every native platform version of Kotlin: Kotlin/JVM, Kotlin/JS, or Kotlin/Native. Every version includes special Kotlin language extensions, tools, and libraries specified for a particular platform.\nI would like to examine the specifics of both platforms, to show the difference between Kotlin Native and Kotline JVM, what problems could be faced in providing a common solution for both platforms, and the ways to provide a working solution. And how to work with new memory management model in 1.6.0 version of Kotlin/Native\n   Maxing out SQLite performance with Rashanjyot Arora Abstract: This talk aims at helping developers improve database and query performance, covering the nuances of SQLite (and Room, especially in a reactive android world).\nWhy is this important?\n Apps are increasingly storing more and more data and some of them are even becoming completely offline first. Screen refresh rates are continually growing, and the faster we can cook up the data to be rendered, the better it is.  What this talk will cover?\n What are Indexes and their types (single-column, multi-column, partial, covering, expression-based etc). Evaluating impact of indexes via examples. Support for indexes in Room and how to get around what Room doesn’t support yet. A common issue with queries in the reactive world and how to get around it. Pitfalls of using database views. (Optional) Understanding advanced SQLite features such as pragma commands - vacuum, optimize etc.     In-Memory Full Text Search with Kotlin with Kshitij Chauhan Abstract: This is a session on building an in-memory full-text-search library with Kotlin\nIn-Memory FTS is a technique to let users search through data that\u0026rsquo;s not persisted to a database. It can be used to build powerful search experiences over ephemeral data, but it\u0026rsquo;s not trivial to implement.\nThis session will cover how to build an in-memory full text search library in Kotlin using Coroutines and Kotlin Data Science libraries.\nTopics:\n Tokenisation and Stemming of text documents Inverted indices for fast reverse-lookups Building a document processing pipeline with Kotlin Coroutines to generate full-text search indices     Develop your app with lots of \u0026ldquo;flow\u0026rdquo; with Gema Rodriguez Abstract: Do you want to learn how to use Flow (and StateFlow)? Let\u0026rsquo;s use it to create an musical app, to compose together a symphony, applying reactive rhymes and using as base the MVI architecture in Android. In this talk we will share this journey to create a musical app in Android, applying the latest concurrency trends from Kotlin and this beloved reactive Android architecture. We will go from the origins and basics of the architecture, its advantages (and downsides), to the current implementation using StateFlow.\n   Building Quality with Firebase with William Shelor Abstract: Firebase is a powerful tool for measuring quality and understanding trends in user behavior. In this session, we’ll discuss some of the free tools Firebase offers for measuring analytics and quality, and how they work together to give insight into how your app is performing. We’ll talk about:\n Understanding user behavior with Firebase Analytics and Audiences Tracking and resolving bugs with Crashlytics Rolling out important changes with Remote Config Measuring impact with Firebase A/B testing Join us as we discuss these elements of Firebase and more, with tips on how we’ve used them to fix bugs, understand user behavior, and grow our application.     Don’t get stung by OWASP - An intro into writing code for greater Android Security with Ed George Abstract: In this session, we will take a dive into OWASP\u0026rsquo;s top threats for mobile security, the common Android security pitfalls we all succumb too and look how we may code in a more security-focused mindset going forwards.\n   Guide to destroying codebases: the demise of clever code with Gabor Varadi Abstract: We try to write the best code possible, simplify future maintenance, optimize for code reuse, and apply best practices and principles to help us achieve this.\nHowever, what if this can serve as a double-edged sword?\nIn this talk, we\u0026rsquo;ll analyze different ways and look at various examples on how through either under-use or over-use (or mis-use) of certain principles, we can inadvertantly introduce enough error surfaces, unintended complexity, or accidental coupling - that the only hope for a fix is a rewrite.\n   Android for Everyone: Accessibility in Android with Sierra OBryan Abstract: Accessibility creates a better experience for everyone. Jetpack Compose simplifies development and can help us more easily build more accessible apps. In this talk, we’ll dive into some common use cases, Android Accessibility APIs, and compare these to the accessibility tools available in Jetpack Compose. We’ll also talk about general best practices, helpful tools, and how to test accessibility in your app.\n   The Golden Principles of Software Architecture Applied To Kotlin Multiplatform with Ryan Kay Abstract: The purpose of this talk is to convey three important principles in software architecture (explained below) in a general way, but using code examples and case studies from a Kotlin multiplatform project to keep it relevant to most Android devs. The principles themselves are quite language/platform agnostic but the last principle is particularly relevant to multiplatform dev.\n  Separation of concerns: I will explain the kinds of code which are observed in all kinds of three layer architectures (i.e. MV-Whatever), without appealing to any particular style/pattern. The idea is to get developers to stop worrying/wasting time about whether they found \u0026ldquo;the best\u0026rdquo; architecture (which doesn\u0026rsquo;t exist), and instead to find a suitable architecture based on project requirements.\n  Abstractions: I will explain different kinds of mechanisms for abstraction (interfaces, abstract classes, inheritance), and as a bonus, Kotlin multiplatform\u0026rsquo;s source sets (using expect actual keywords). I will also address the issue of when you should prefer an abstraction, or simply a concrete class.\n  Framework/Library minimalism: I will explain the benefits and difficulties that come with using 3rd party libraries and frameworks versus keeping most of your codebase standard library, and isolating libraries to specific end points of the application. I will also emphasize how doing this is particularly relevant to multiplatform programming in terms of code re-use.\n     Improving Gradle builds with Mohit Sarveiya Abstract: As the number of modules in your code base increases, speed and consistency of your Gradle builds becomes very important. However, improving your Gradle builds can be a tricky endeavor. In this talk, I’ll address these common questions in improving Gradle builds.\n How do we benchmark \u0026amp; profile our builds? How do you read build scans to identify problems? How do we maintain a consistent modular structure? What tools can you use to speed up builds?  I’ll take a deep dive into these questions with examples and insights from my experiences.\n   ","href":"https://siddroid.com/post/community/event-android-worldwide-january-2022/","title":"Android Worldwide: January 2022"},{"browse":"Updates","content":"   Two years in rewind For the last two years I had been building Paytm\u0026rsquo;s chat-based payment experience. Working on a brand like Paytm is super awesome and challenging at the same time. Paytm operates at a huge scale and recently they did the biggest IPO in the history of India.\nOver a span of 2 years, I helped shape up their entertainment verticals like movies, event and amusement park ticketing before moving on to architect the chat based payment flows.\n -- If you use Paytm, you will now be able to pay directly to anyone through a chat option, enabling communication in full Whatsapp style, sending and receiving money through various payment modes like UPI, Wallet and direct bank transfers via NEFT and IMPS.\nThe adoption of Paytm is increasing day-by-day and it is truly a super-app with a decade old history.\n Great companies are built by great products! - Elon Musk\n I\u0026rsquo;ll add to the quote and say \u0026mdash;\nGreat products are built by brilliant engineering and product teams.\nI was fortunate enough to experience both while working on Paytm.\n Moving to Berlin  Berlin, Germany\u0026rsquo;s capital city is truly a sight to behold! It\u0026rsquo;s wonderful with rich history and is aptly called the city of reunification. Berlin is a growing market with top tech companies moving their headquarters to the city and it is attracting talents from all around the world.\nMoving to a different city can be hard for any working individual, specially if you are moving entirely to a different country. It brings a set of challenges, everything is new, the people, the climate, rules \u0026amp; regulations etc.\n Joining Delivery Hero  Delivery Hero is a leading food delivery company pushing the boundaries of local delivery \u0026amp; Q-commerce. It is present in over 50 countries across four continents and is on a mission to deliver anything, straight to customers’ doors.\nIt houses over 13 brands\n   \u0026ndash; \u0026ndash; \u0026ndash;     Foodpanda Foodora Mjam   NetPincér Dáme jídlo Yemeksepeti   Foody Talabat Hunger Station   efood.gr InstaShop PedidosYa   Yogiyo Baedal Minjok      I have joined the tech division as an Android engineer, building food ordering experiences and helping customers better plan their orders. Super excited to start this new chapter of my journey!\nIf you are in Berlin, do drop me a message, would love to catch-up with a fellow engineer over a coffee : )\n ","href":"https://siddroid.com/post/post-i-have-joined-delivery-hero-in-berlin-germany/","title":"I have joined Delivery Hero!"},{"browse":"Community","content":"  Event Details Abstract: 2:00 PM (IST) - Kotlin for backend Engineering with Himanshu Singh\nWe have a lot of code experience to share as an Android developer using Kotlin or a Backend developer using Java. When we talk about backend technologies, we have a lot of languages/frameworks like Go, Java, Python, etc. But when we talk about Kotlin as a backend language, it might raise a lot of eyebrows But let me try to convince you that Kotlin is definitely a good choice for Backend!\nAbout the speaker:\nHimanshu Singh is a Google Developer Expert in Android and I have but worked on multiple domains like Healthcare, Rental, and Gaming platforms. His primary focus is on building robust architecture and make our apps scalable. Apart from the Android domain, he is an active Open source contributor and backend developer. And yes he loves Kotlin.\n Rewind Watch the talk on our youtube channel\n  ","href":"https://siddroid.com/post/kotlin-mumbai-events/post-kotlin-for-backend-engineering-himanshu-singh/","title":"Kotlin Mumbai: Learn backend engineering with Ktor"},{"browse":"Kotlin ; Compose","content":"   We are going to focus on how we can use functions to alter the nature of an object and change it, and how we can chain functions together to apply their effects on an object in one go with a composite pattern.\nBy the end of this article, we would cover:\n What is function chaining? Understand how Jetpack Compose Modifiers work Learn aggregation using fold functions Build our version of Compose() builder with function chaining   Table of content  Table of content Function chaining What is aggregation?  Folding   Essentials of Compose UI modifiers  I. Modifier Interface II. Modifier Element III. Modifier Companion IV. Combined Modifier   Visualizing compose modifier function chain Visualizing view nesting based on fold direction Building our function chaining with Composition  I. Car Example II. Building the chain pattern III. Components of the Chain IV. LinkedChain   Building an object with our Compose() function Extending and using the Chain The result Summary   Function chaining I\u0026rsquo;m sure with the recent stable release of Jetpack Compose, you are familiar with its Modifier system. The modifier system by class design allows us to set \u0026ldquo;modifications\u0026rdquo; on the class by chaining functions.\n// f(x) -\u0026gt; g(x) -\u0026gt; h(x) Modifier.width(10.dp).height(10.dp).padding(start = 8.dp).background(color = Color(0xFFFFF0C4)) Notice how each function can be called directly after the invocation of the other, once .width() is called immediately you can call .height() and in this manner, endlessly chain the functions one after the other till the desired modifications are applied or composed together. Super convenient!\nHow can we build a pattern similar to this?\nLet\u0026rsquo;s take an example of a Car class. It has two properties, ownerName and color.\nclass Car(var ownerName: String, var color: String) { fun changeOwner(newName: String) { this.ownerName = newName } fun repaint(newColor: String) { this.color = newColor } } If we create an instance of this class and try to access the functions, we can\u0026rsquo;t chain them successively.\nvar myCar: Car = Car(\u0026#34;Sid\u0026#34;,\u0026#34;Red\u0026#34;) // Standard way of calling functions one after another  myCar.changeOwner(\u0026#34;New Owner\u0026#34;) myCar.repaint(\u0026#34;Blue\u0026#34;) // Not possible, none of the functions can be chained together  myCar.changeOwner(\u0026#34;Sid Patil\u0026#34;).repaint(\u0026#34;Green\u0026#34;) The first thing we all would probably think about is just returning the instance of the same class and chaining will be possible. But this means changing all functions to return an instance of the same class with the return type specifier.\n// Now both functions return the instance of the class and have return type specifiers  fun changeOwner(newName: String) : Car { this.ownerName = newName return this } fun repaint(newColor: String) : Car { this.color = newColor return this } The above works but does not support multiple types and is not intuitive. The compose modifier system has separate typed modifiers eg PaddingModifier, FillModifier, etc and they combine to form linkages between modifiers and generate views.\nAt this point let me highlight that the compose Modifier system leverages Kotlin\u0026rsquo;s extension function capabilities. For example, take fillMaxWidth()\nfun Modifier.fillMaxWidth(fraction: Float = 1f) : Modifier Here the function is extending the Modifier object. The function also returns a Modifier instance so that consecutive function calls can be chained together.\nWait.. but how is this any different than us simply returning class instances to enable function chaining?\nFirstly it supports multiple types of classes (Since modifier is an interface), different implementations of Modifiers can be returned and the chain would still work. Secondly, the modifier system uses an aggregation logic to enable chaining.\nWhat is aggregation?  Aggregation: a cluster of things that have come or been brought together\n In our context, aggregation applies to the act of collectively applying operations together. This means applying our functions in a chain to the instance of the object and altering its nature. Kotlin contains powerful in-built aggregating functions.\nFolding Kotlin\u0026rsquo;s fold() function allows us to aggregate operations and collects the result once all operations are performed. Here in our example, we sum all numbers from 1 to 5 using fold.\n// starts folding with initial value 0  // aggregates operation from left to right  val numbers = listOf(1,2,3,4,5) numbers.fold(0) { total, number -\u0026gt; total + number} There is reduce() function as well, which we can also use if we don\u0026rsquo;t want an initial value before aggregation. Folding is always done in a given direction, left to right or right to left.\nval numbers = listOf(1,2,3,4,5) // 1 + 2 -\u0026gt; 3 + 3 -\u0026gt; 6 + 4 -\u0026gt; 10 + 5 = 15  numbers.fold(0) { total, number -\u0026gt; total + number} // 5 + 4 -\u0026gt; 9 + 3 -\u0026gt; 12 + 2 -\u0026gt; 14 + 1 = 15  numbers.foldRight(0) {total, number -\u0026gt; total + number} The direction of the fold will determine the final result so it\u0026rsquo;s super important that we decide on a direction. In our example the operation was the same i.e. summation, if the operation were to be complex and dependent on the previous operations then your fold direction will determine your final result.\nThis is precisely why the sequence or order of your function calls on Modifier is important in deciding how Compose will render your UI.\nNow that we\u0026rsquo;ve understood how aggregation works, let\u0026rsquo;s look in detail at how compose modifiers work.\nEssentials of Compose UI modifiers There are four essential components in compose modifiers\n Modifier Interface Modifier Element Modifier Companion Combined Modifier  An understanding of these four building blocks of Compose UI will allow us to gain insight into how we can build a simpler version of the same pattern.\nI. Modifier Interface The modifier interface is the starting unit of the modifier logic. Being an interface it outlines the various operations that can be performed by its implementing classes.\ninterface Modifier { fun \u0026lt;R\u0026gt; foldIn(initial: R, operation: (R, Element) -\u0026gt; R): R fun \u0026lt;R\u0026gt; foldOut(initial: R, operation: (Element, R) -\u0026gt; R): R fun any(predicate: (Element) -\u0026gt; Boolean): Boolean fun all(predicate: (Element) -\u0026gt; Boolean): Boolean infix fun then(other: Modifier): Modifier = if (other === Modifier) this else CombinedModifier(this, other) } The foldIn() function is essentially a fold() function moving from the left to right direction as we understood in the aggregation section. The foldOut() is opposite and moves from right to left applying its operations in the chain.\nThe then() function is what allows us to chain our operations, taking in a Modifier and returning a CombinedModifier. The first referential equality check just asserts that you don\u0026rsquo;t end up chaining your object and in case you do, returns the instance of the self.\nThe other two functions, any() and all() are used while materializing for the runtime. Materialize function is an extension of Composer which will prepare the modifiers for attaching to the runtime tree-node or for tooling in Android Studio through the layout inspector.\nII. Modifier Element The modifier element is a node within the modifier chain, think of this as a linkage. Many linkages together form the full chain data structure. The modifier element is also an interface.\ninterface Element : Modifier { override fun \u0026lt;R\u0026gt; foldIn(initial: R, operation: (R, Element) -\u0026gt; R): R = operation(initial, this) override fun \u0026lt;R\u0026gt; foldOut(initial: R, operation: (Element, R) -\u0026gt; R): R = operation(this, initial) override fun any(predicate: (Element) -\u0026gt; Boolean): Boolean = predicate(this) override fun all(predicate: (Element) -\u0026gt; Boolean): Boolean = predicate(this) } III. Modifier Companion The modifier companion is an object primarily responsible for starting the chain, it\u0026rsquo;s a simple companion object that implements the modifier interface.\ncompanion object : Modifier { override fun \u0026lt;R\u0026gt; foldIn(initial: R, operation: (R, Element) -\u0026gt; R): R = initial override fun \u0026lt;R\u0026gt; foldOut(initial: R, operation: (Element, R) -\u0026gt; R): R = initial override fun any(predicate: (Element) -\u0026gt; Boolean): Boolean = false override fun all(predicate: (Element) -\u0026gt; Boolean): Boolean = true override infix fun then(other: Modifier): Modifier = other override fun toString() = \u0026#34;Modifier\u0026#34; } This companion is what is being called when you start chaining with Modifier.width().height()\u0026hellip;\nIV. Combined Modifier The combined modifier forms as a unit of the chain and constitutes an Outer and Inner linkage, connecting Element and other CombinedModifier instances. This is a separate class, that implements the modifier interface as well.\nclass CombinedModifier( private val outer: Modifier, private val inner: Modifier ) : Modifier { override fun \u0026lt;R\u0026gt; foldIn(initial: R, operation: (R, Modifier.Element) -\u0026gt; R): R = inner.foldIn(outer.foldIn(initial, operation), operation) override fun \u0026lt;R\u0026gt; foldOut(initial: R, operation: (Modifier.Element, R) -\u0026gt; R): R = outer.foldOut(inner.foldOut(initial, operation), operation) override fun any(predicate: (Modifier.Element) -\u0026gt; Boolean): Boolean = outer.any(predicate) || inner.any(predicate) override fun all(predicate: (Modifier.Element) -\u0026gt; Boolean): Boolean = outer.all(predicate) \u0026amp;\u0026amp; inner.all(predicate) override fun equals(other: Any?): Boolean = other is CombinedModifier \u0026amp;\u0026amp; outer == other.outer \u0026amp;\u0026amp; inner == other.inner override fun hashCode(): Int = outer.hashCode() + 31 * inner.hashCode() override fun toString() = \u0026#34;[\u0026#34; + foldIn(\u0026#34;\u0026#34;) { acc, element -\u0026gt; if (acc.isEmpty()) element.toString() else \u0026#34;$acc, $element\u0026#34; } + \u0026#34;]\u0026#34; } Even though we are using the term chain as a data structure for organizing our nodes of modifiers, the right way to look at this is to understand that there is an outer chain node that wraps around another chain node. Each node of the chain is essentially a CombinedModifier forming linkage.\nVisualizing compose modifier function chain The best way to visualize the chain is keeping in mind the outer and inner object wrappings and the linkages formed due to this wrapping.\n Visualizing view nesting based on fold direction Another way to look at the chained modifiers is by visualizing how view modifiers are applied when you compose. The direction of composition is from the outermost view to the innermost view.\n  The wrapping of objects within combined objects and linking them together through this wrapping itself while enabling traversing through the links using aggregating fold functions is the simple genius behind compose modifier logic.\n We also saw that there is a foldOut() function that can also enable aggregation from the inner object to the outer object in the reverse direction if needed.\nBuilding our function chaining with Composition Phew! Now that we have covered some basics of function chaining, specifically regarding Compose and its modifiers, let us look into how we can build the same pattern for our projects in a simpler fashion along with compositional design.\nI. Car Example  Build a pattern that allows us to \u0026ldquo;Compose\u0026rdquo; objects The pattern must be extensible and reusable throughout our project Follow compositional design pattern  As an example for demonstration, We\u0026rsquo;ll build a Car class over which several properties will be composed.\nOur car will have:\n Engine Seats Wheels Visuals Manufacturer Owner  II. Building the chain pattern Taking inspiration from Compose, To build our project-wide chaining logic let\u0026rsquo;s start with a simple Chain interface\n/** * Chain core interface */ interface Chain { /** * Fold aggregator * Direction: Left -\u0026gt; Right * @param initial the inital object * @param operation the operation to perform * @return the type-specified object */ fun \u0026lt;R\u0026gt; fold(initial: R, operation: (R, ChainUnit) -\u0026gt; R): R /** * Form LinkedChain object linking two ChainUnits * @return [LinkedChain] object */ fun then(other: Chain): Chain = LinkedChain(this, other) /** * A chain-unit * Building block of our chain */ interface ChainUnit : Chain { /** * Fold aggregator * Direction: Left -\u0026gt; Right * @param initial the inital object * @param operation the operation to perform * @return the type-specified object */ override fun \u0026lt;R\u0026gt; fold(initial: R, operation: (R, ChainUnit) -\u0026gt; R): R = operation(initial, this) } /** * Companion builder for starting chains */ companion object : Chain { override fun \u0026lt;R\u0026gt; fold(initial: R, operation: (R, ChainUnit) -\u0026gt; R): R = initial override fun then(next: Chain): Chain = next } } III. Components of the Chain  Chain interface: Outlines chaining capabilities of folding and linking Chain Unit: The basic unit of our chain implementing capabilities of Chain interface Chain Companion: To start the chain  Our core interface contains one fold() function which moves from left to right and a then function that builds a LinkedChain. The then() function is what creates a LinkedChain. A companion is declared to start the Chain with initial implementations.\nIV. LinkedChain A LinkedChain houses the outer and inner objects and enables repeated nested wrapping to form the actual chain.\nclass LinkedChain( private val outer: Chain, private val inner: Chain ) : Chain { override fun \u0026lt;R\u0026gt; fold(initial: R, operation: (R, Chain.ChainUnit) -\u0026gt; R): R = inner.fold(outer.fold(initial, operation), operation) } We override the fold() function of the Chain interface and call the fold() function on the inner object passing the result of the fold() function on the outer object as a param to the inner fold() function.\n(Fold-ception!)\nNow that our Chain logic is complete let\u0026rsquo;s build our Car. Vroom!\nBuilding an object with our Compose() function We\u0026rsquo;ll build our car keeping in mind that we want to follow a compositional pattern and ensure that our properties of the car are built in a modular, plug-and-play manner allowing us to easily couple change or decouple them in the future if needed.\ninterface Vehicle { fun isSafeForEnvironment() : Boolean fun color() : String fun seatCapacity() : Int fun ownerDetails() : String fun wheels() : Int fun manufacturer() : String } We start by defining the functionality of our Car, here a Vehicle interface is used which will be implemented by our car class.\nclass Car private constructor(chainer: Chain) : Vehicle { companion object { fun compose(chainer: Chain) : Car { return chainer.fold(Car(chainer)) { car, chainUnit -\u0026gt; car } } } override fun isSafeForEnvironment(): Boolean {} override fun color(): String {} override fun seatCapacity(): Int {} override fun ownerDetails(): String {} override fun wheels(): Int {} override fun manufacturer(): String {} } Our Car class implements the Vehicle interface, all the functions are not implemented yet (we\u0026rsquo;ll fix that). Notice that\n The constructor is private. It needs a Chain to build itself. We have a companion object in which we have a compose() function, which takes the chain as a param. The compose() function calls the fold() function to compose our car. For now, it\u0026rsquo;s just an empty function that just returns the Car through its type specifier and the accumulated result of the folding.  We want all the functionalities and properties of our Car to be modular, we\u0026rsquo;ll start by building four modules for the car; CarEngine, CarSpecs, CarOwner, and CarVisuals. Each module we build will implement ChainUnit interface for chaining capabilities.\nclass CarEngine(var engineType: EngineType) : Chain.ChainUnit { fun needRecharge() : Boolean { return (engineType == EngineType.ELECTRIC) } fun causesPollution() : Boolean { return engineType == EngineType.DIESEL || engineType == EngineType.PETROL } } class CarVisuals(var color: String) : Chain.ChainUnit { fun isColorMetallic() : Boolean { // some color determining logic here  // dummy response  return true } } class CarSpecs(var wheelCount : Int, var seats: Int, var manufacturer: String) : Chain.ChainUnit { // more functions here as needed  } class CarOwner(var name: String, var licenceNo: String, var address: String) : Chain.ChainUnit { fun isLicenceExpired() : Boolean { // Some logic based on licenceNo  // dummy response  return false } } For demonstration, I\u0026rsquo;ve implemented functions for the CarEngine module. The rest of the modules serve as an example for now but can house more logic.\nLet\u0026rsquo;s add the modules to our car class and complete our compose() function. In the compose function, with each fold, we check if the chain unit is a given module and bind it to our object.\nNote that in our example, during fold operations we are just binding modules, more powerful logic can be written per fold depending on ChainUnit type that will determine the final properties of our object just from the compose() function alone.\nclass Car private constructor(chainer: Chain) : Vehicle { private var carEngine: CarEngine? = null private var carOwner: CarOwner? = null private var carSpecs: CarSpecs? = null private var carVisuals: CarVisuals? = null companion object { fun compose(chainer: Chain) : Car { return chainer.fold(Car(chainer)) { car, chainUnit -\u0026gt; when(chainUnit) { is CarEngine -\u0026gt; car.carEngine = chainUnit is CarVisuals -\u0026gt; car.carVisuals = chainUnit is CarSpecs -\u0026gt; car.carSpecs = chainUnit is CarOwner -\u0026gt; car.carOwner = chainUnit } car } } } Our compose() function is the only way we can construct the car hence, safe to say that the modules would be present when instantiating a new Car. Yes, we can pass an empty Chain, which can be handled with a simple conditional check.\nThe result of the chained operations is the accumulator after folding through all the chain units. The accumulator is the final composed object (The car).\nFurthermore, our Vehicle interface function implementations can now be completed since we have the necessary modules in our car class.\noverride fun isSafeForEnvironment(): Boolean { return if(carEngine != null) { !carEngine!!.causesPollution() } else { // default, handle as needed  false } } In the above snippet, we use the car engine and call the causesPollution() function from CarEngine module to determine if the car is safe for our environment.\nExtending and using the Chain To use the chain, we\u0026rsquo;ll use Kotlin\u0026rsquo;s extending functions and leverage the then() function to chain our function calls.\nfun Chain.carEngineType(engineType: EngineType) : Chain = this.then( CarEngine(engineType) ) fun Chain.carOwnerDetails(name: String, licenceNo: String, address: String) : Chain = this.then( CarOwner(name,licenceNo,address) ) fun Chain.carSpecs(wheelCount: Int, seats: Int, manufacturer: String) : Chain = this.then( CarSpecs(wheelCount,seats,manufacturer) ) fun Chain.carVisuals(color: String) : Chain = this.then( CarVisuals(color) ) Each extension function calls the linking then function from the Chain to build LinkedChain objects composing our final Car.\nThese extensions are for Car object you can build extensions for multiple objects as well.\nThe result // Composing our car  val car = Car.compose(Chain.carEngineType(EngineType.ELECTRIC) .carOwnerDetails(name = \u0026#34;Android Dev Community\u0026#34;, licenceNo = \u0026#34;API31\u0026#34;, address = \u0026#34;California\u0026#34; ).carSpecs( wheelCount = 4, seats = 2, manufacturer = \u0026#34;Tesla\u0026#34; ).carVisuals( color = \u0026#34;Green\u0026#34; ) ) // Use the car  car.isSafeForEnvironment() Our pattern is complete! We\u0026rsquo;ve built a function-chaining compositional pattern that can be used project-wide.\nSummary  Reusable chaining logic Modular composition of objects, easy coupling, and decoupling Extensible Compose() companion function can be customized   Here is a Github Gist for your reference, or a Kotlin Playground link to run the above code.\nIf you liked this post, and the chaining pattern, do share it and comment any relevant feedback down below. : )\n","href":"https://siddroid.com/post/kotlin/build-function-chains-using-composition-in-kotlin/","title":"Build function chains using composition in Kotlin"},{"browse":"Community","content":"   Event Details Our third event at Android worldwide took place on 27th July 2021 over two days (or one day depending on your timezone). It was absolute fun, with two previous events and over 20 talks already we saw ever increasing support from the community. This quarter we had interesting topics, mainly due to new API releases and eager Android devs ready to try them.\nOur speakers for July 2021\n Gabor Varadi Ana Zharkova Ash Davis Sagar Viradiya Subhrajyoti Sen Moataz Nabil David Rawson Mohit Sarveiya Madona Syombua Ed George  We also recently updated our website, do visit Android Worldwide\nOver 30 communities are a part of the Android Worldwide group and we had over 750 developers register for the event!\n Participating communities    \u0026ndash; \u0026ndash; \u0026ndash;     Android Budapest Android Developer Group Poznan Android Serbia   AndroidHeads Vienna DC Android Denver Droids   GDG Android Columbus GDG Boston Android GDG Bronx   GDG Capital Region GDG Córdoba Argentina GDG Fresno   GDG Helwan GDG Kolachi GDG Los Angeles   GDG Los Angeles Android GDG Montreal GDG Mumbai   GDG Nagpur GDG New York City GDG Osijek   GDG Phoenix GDG Tbilisi GDG Toronto Android   GDG Washington Kotlin Mumbai New York Android Developers   Kotlin Hyderabad \u0026ndash; \u0026ndash;     Dealing With KSP in Common Code for Android and iOS with Anna Zharkova KSP (Kotlin Symbol Processor) is an API from Google for writing Kotlin compiler plugins. Using KSP we can write annotation processors to reduce boilerplate and solve cross-cutting concerns. Also KSP is more effective than KAPT. Among the advantages of using it is the support of Kotlin Multiplatform. In my talk I would like to present several cases (such as Dependency Injection, e.g) of using KSP in Kotlin Multiplatform for both Android and iOS.\n   Uncoiling the COIL - Modern Image Loading on Android with Sagar Viradiya Image loading is hard but luckily this problem has already been addressed on Android. There are many libraries out there that handle image loading seamlessly. COIL is the new kid to the club and you may be wondering why do we need another image loading library?\n   Understanding WindowInsets with Subhrajyoti Sen Most of us would have heard of WindowInsets lately but never really understood what they are or why we need them. Have you had to write complex code just to get the height of the keyboard or use a combination of flags (that were confusing) to get a desired status bar appearance. The WindowInsets APIs provide convenient ways to handle these scenarios.\n   Everything is an API with Ash Davies Just because we might not be exposing a module as a public or open-sourced library, doesn\u0026rsquo;t mean we can\u0026rsquo;t benefit from making good decisions towards an effective and sensible API. By taking the stance that every piece of code we write is an API we can build more versatile and scalable applications.\n   Simplified Single-Activity Apps Using Simple-Stack with Gabor Varadi Single-Activity apps have been the officially recommended way to structure Android applications since 2018. However, whether they\u0026rsquo;re simpler to write and maintain compared to multi-Activity apps (or even \u0026ldquo;Activity per screen\u0026rdquo; approaches) is still sometimes up for debate.\nThis talk focuses on the single-activity-focused navigation framework Simple-Stack, which has been in development since 2017.\n   The Road to Mobile DevOps for Android with Moataz Nabil Mobile DevOps is a practice of bringing the different disciplines involved in developing, testing, releasing, and operating software into being functional inside organizations or by a team that works closely together. The team is able to continuously deliver their apps based on continuous feedback and iteration. Different practices, habits, and flavors of adopted company cultures set the behavior for an actual process and daily doing.\n   Sorting and Reporting Your Dependencies with Gradle with Ed George All apps have dependencies, but what is the best way to manage and keep on top of them? This session takes a look at some simple steps, tools, and tricks to use Gradle to help us make dependency management far easier.\nStarting with simple Gradle language features, we will also explore how to handle dependencies within more complex projects, dive into some useful Gradle plugins, and finally look into what the future of dependency management within Android may be.\n   The New Jetpack Register for Activity Result API with Madona Syombua Android docs now recommend using this new registerForActivityResult API in favor of the old one, onActivityResult, we can dive deep into how this new API has made part of development seamless. Also, one can define a custom contract so that the consuming app can get results as a sealed class rather than as an intent.\n   Arrow of Outrageous Error Handling with David Rawson Arrow is a functional programming library for Kotlin that has been featured in the ThoughtWorks Tech Radar. This talk will explore some error handling techniques from functional programming that will make your Android apps more robust. We will cover Either and Validated from the Arrow library with examples in a real Android codebase.\n   Kotlin State \u0026amp; Shared Flows in Action with Mohit Sarveiya State Flows and Shared Flows were introduced to broadcast events to multiple consumers with coroutines. We’ll dive deep into the Shared \u0026amp; State Flow APIs. A Shared Flow provides you with the ability to replay and cache events. How do you handle back pressure? We’ll look into simple-to-use cases for using Shared Flows.\n   à la prochaine fois See you all next time folks! Mostly around November in our next Android worldwide session.\n","href":"https://siddroid.com/post/kotlin-mumbai-events/post-android-worldwide-july-2021/","title":"Android Worldwide: July 2021"},{"browse":"Community","content":"  Event Details A page out of server-driven UI: Speaker: Adit Lal from Gojek\nIn this talk we dive into few example\u0026rsquo;s of server-driven UI (SDUI), it\u0026rsquo;s important to understand the general idea of SDUI and how it provides an advantage over traditional client-driven UI and why it\u0026rsquo;s so current hot-topic. We take a look at multiple offerings such as JetPack Compose or Epoxy (Airbnb\u0026rsquo;s library), and we then take a look at some tips and tricks to navigate the code from start to finish.\nUsing GraphQL in a KMM project with Jetpack Compose and SwiftUI: Speaker: John O\u0026rsquo;Reilly, GDE for Kotlin\nIn this talk John will show how GraphQL, using Apollo library, can be used in shared code in a Kotlin Multiplatform project with the UI developed using Jetpack Compose on Android and SwiftUI on iOS. The talk will cover\n Use of Apollo GraphQL library and it\u0026rsquo;s Kotlin Multiplatform support allowing addition of GraphQL queries and related logic in code shared between iOS and Android clients. Development of clients using Declarative UI frameworks (Jetpack Compose on Android and SwiftUI on iOS)   Rewind Watch the talk on our youtube channel\n  ","href":"https://siddroid.com/post/kotlin-mumbai-events/post-kotlin-multiplatform-graphql-compose-and-server-driven-ui/","title":"Kotlin Mumbai: Multiplatform projects and server-driven UI"},{"browse":"Community","content":" Event Details Image loading is hard but luckily this problem has already been addressed on Android. There are many libraries out there that handle image loading seamlessly. COIL is the new kid to the club and you may be wondering why do we need another image loading library? COIL is Kotlin first library backed by Kotlin Coroutines. It gives you an easy and concise API to deal with image loading. Oh and also it takes less space! In a nutshell, it\u0026rsquo;s an easy-to-use, fast, lightweight, and modern library.\nThis talk will address\n Why you should consider this library for image loading? Understanding its API. How it works? by covering its entire image loading pipeline. By the end, you\u0026rsquo;ll walk away with the advantages of using COIL and its image loading pipeline.   Recording   Q\u0026amp;A We had over 25+ questions from the audience! Some we were able to address and Sagar has shared answers to the rest. Here are the questions:\n You can also visit Youtube, the answers to the following questions are time-stamped directly in the video and can easily be found.\n Questions\n Why prefer Coil over Picasso, Glide? If you are using RxJava extensively, what is your opinion of using COIL in a Rxified way? Does Coil has built-in Compose support? or planning to? (I am aware of Accompanist) I read \u0026ldquo;Coil performs a number of optimizations including memory and disk caching, downsampling, re-using bitmaps, etc\u0026rdquo;. Glide also does that, right? Why is it fast? Does Coil has any plan to support KMP? Any drawback of using Coil? How is the performance of Coil wrt bitmap caching etc? Is it possible to write custom Transformers? When we use Picasso or glide we need to check if the URL string is not null/empty/ correct etc, does coil take care of this validation itself? If an image is of high resolution and I only want to load the image according to the width/ height of ImageView, how can I transform that image before it\u0026rsquo;s shown? How to load images in RecyclerView (i.e list) by keeping performance in mind? Like image dimension, time, etc. Does Coil has built-in support for SVG? How Coil has handling image when API can return jpg, png, and SVG file also. It is automatically identified SVG and loading If I want to load quite a lot of images, how do you think one should go about using predictive fetching to load those with Coil Is BookMyShow using Coil? Does coil support AVIF image format support that was announced in Android 12? Does COIL support animated GIFs or APNGs? Does COIL support Native NDK Image decoder which is available from Android 11 and is now fully supported in Android 12? Can COIL be used with Jetbrains Compose on the desktop? Can it be used in headless mode? Does Coil have both disk and in-memory cache? Can GCP Kubernetes Pod instances be enabled with Kotlin\u0026rsquo;s lambda function in a browser app where COIL parameters have to be populated for AI/ML image types? I have designed an android view in IntelliJ IDEA IDE with a basic Kotlin Gradle onCreateView() function. How fetcher interface can allocate GCP CLI in a region? Will the slides be available later to refer back? (see description) Can Coil upsample images for me? If yes, does it use something like nearest-neighbor interpolation or something else? Is Coil a pure JVM library or only an Android library?  Other questions Here are answers to some unanswered questions from the video that Sagar has shared with us.\nIf you are using RxJava extensively, what is your opinion of using COIL in an Rxified way?\n In terms of Rx, I\u0026rsquo;d recommend using the Kotlin coroutines RxJava interop library\n Does Coil has any plan to support KMP?\n No plans to use KMP! Coil relies on a lot of Android-specific behaviour and APIs and it would be a huge effort to support it.\n Any drawback of using Coil?\n In terms of drawbacks, Coil doesn\u0026rsquo;t support 100% of Glide\u0026rsquo;s feature set (but has some features Glide doesn\u0026rsquo;t). Thumbnails, for instance, is one a lot of folks have requested.\n Can Coil upsample images for me? If yes, does it use something like nearest-neighbor interpolation or something else?\n Coil can and will upsample images in certain cases. It uses Android\u0026rsquo;s scaling algorithm which differs across API versions\n On to the next one! Thanks to everyone who attended the session. It was really fun and we can\u0026rsquo;t wait to do our next online meetup. It is going to be pretty interesting! Stay tuned for more and follow us on Twitter @KotlinMumbai\n","href":"https://siddroid.com/post/kotlin-mumbai-events/post-uncoiling-the-coil-with-sagar-viradiya-2021/","title":"Uncoiling the Coil with Sagar Viradiya"},{"browse":"Community","content":" Event Details The second event of the Android Worldwide group of communities happened on April 27th, 2021. Android Worldwide is an initiative by various communities around the globe to bring like minded folks together to learn about the latest in Android and have fun doing so. The last event we organized was in January 2021, which was the first event of the series. We heard speakers talk on various topics like using Joda time, reactive programming with Kotlin Flows, library development on Android to name a few. The response from communities was amazing and we joined hands again in April with more talks for everyone.\n Over 30 communities are a part of the Android Worldwide group and we had over 780 developers register for the event!\n Participating communities    \u0026ndash; \u0026ndash; \u0026ndash;     Android Budapest Android Developer Group Poznan Android Serbia   AndroidHeads Vienna DC Android Denver Droids   GDG Android Columbus GDG Boston Android GDG Bronx   GDG Capital Region GDG Córdoba Argentina GDG Fresno   GDG Helwan GDG Kolachi GDG Los Angeles   GDG Los Angeles Android GDG Montreal GDG Mumbai   GDG Nagpur GDG New York City GDG Osijek   GDG Phoenix GDG Tbilisi GDG Toronto Android   GDG Washington Kotlin Mumbai New York Android Developers   Kotlin Hyderabad \u0026ndash; \u0026ndash;     Schedule in IST Date: 27/04/2021\n 06:00 PM: Start of Part One 06:45 PM: Making rules with Lint by Honey Sonwani 07:35 PM: Android App Bundle: from start to deployment by Julien Salvi 10:00 PM: Start of Part Two 10:45 PM: Jetpack Compose for Games \u0026amp; Animations by Wajahat Karim 11:35 PM: Mastering API Visibility in Kotlin by Márton Braun  Date: 28/04/2021 (Day 2)\n 04:15 AM: Start of Part Three 05:00 AM: Kotlin goes global by Karan Dhillon 06:30 AM: Start of Finale 07:15 AM: Unit Testing Kotlin Channels \u0026amp; Flows by Mohit Sarveiya 08:05 AM: Preview Driven Development by Rikin Marfatia  The event spanned over two days, here are the slides and recordings of each of the talks.\n Making rules with Lint with Honey Sonwani Creating our own custom rules with lint. Upsides and downsides of having lint in your project.\n   Android App Bundles: From start to deployment with Julien Salvi This publication format has been around for a while now and will be required for the new apps on the Play Store in August 2021. This session will cover all the steps to migrate your existing project in order to build and release a brand new AAB file to the Play Store. You will see the advantages and drawbacks of App Bundle. How you can easily configure your project, handle testing tracks and update your CI/CD (CircleCI, Bitrise) to deploy your optimized app with fastlane.\n   Jetpack Compose for Games \u0026amp; Animations with Wajahat Karim    Mastering API Visibility in Kotlin with Márton Braun When designing a library, minimizing your API surface - the types, methods, properties, and functions you expose to the outside world - is a great idea. This doesn’t apply to just libraries: it’s a consideration you should make for every module in a multi-module project. In this talk, we’ll look at all the ways that Kotlin lets you get your visibility just right.\n   Kotlin goes global by Karan Dhillon Explore Kotlin Multiplatform, what it is and how it is different. We will also cover a sample project during the presentation to go over how to work in a KMM project, and finish by exploring if KMM is a viable solution for a party or not.\n   Preview Driven Development with Rikin Marfatia Rikin talks about using Jetpack Compose as an example to talk about how we can enjoy preview driven development using the latest tooling in Android Studio.\n   Sponsors Stream was the sponsor for this event. Visit getstream.io to know more.\n Wrapping it up Thanks for joining this event. It was super fun hosting the event with Merab from GDG Tbilisi. Special thanks to Marton Braun for editing the videos of all the sessions. We will most likely assemble within the next three months to do another set of amazing events. Till then stay tuned for more! You can join our Slack workspace in the meanwhile.\n ","href":"https://siddroid.com/post/kotlin-mumbai-events/post-android-worldwide-april-2021/","title":"Android Worldwide: April 2021"},{"browse":"Projects ; Compose","content":"  A library of colors, gradients and utils built using Jetpack Compose for Android  Listed on Google developers\nFeatures  A wide collection of colors from different palettes for easy access in your pet projects Provides easy gradient building functions that all your composable brushes need Just 28 KB in size! Over 450 predefined colors and endless gradients.  Color Palettes  Material Colors Flat Colors Cool Colors Dracula Colors  Color palette showcase    Cool Colors Material colors Flat colors Dracula colors             Gradient mixer showcase    Directional Gradients Directional multi color gradients          Using colors You can simply pick colors by using the container objects for each palette and profit.\nEg. MaterialColor.RED CoolColor.FIREBRICK FlatColor.EMERLAND DraculaColor.YELLOW\n Palette references  Material Colors Flat Colors Cool Colors Dracula Colors  Using Gradients Using gradients is super easy with Holi, just use GradientMixer and choose from various gradient brush generating functions.\n1. Mixing two colors GradientMixer.bottomLeftToTopRight(MaterialColor.RED,MaterialColor.GREEN) 2. Mixing more than two colors GradientMixer.topRightToBottomLeft( listOf(MaterialColor.RED, MaterialColor.GREEN, MaterialColor.PURPLE) ) 3. Reversing gradients GradientMixer.rightToLeft(FlatColor.CARROT,FlatColor.POMEGRANATE,reversed = true)  Holi\u0026rsquo;s GradientMixer is a container for gradient (Compose Brush) generating functions. These functions act as wrappers around Compose\u0026rsquo;s gradient generators so that you don\u0026rsquo;t have to figure out offset values with their directions. The idea behind this gradient mixer is easy access to gradient building.\nHow to use Holi is available on MavenCentral, declare maven central in your repositories and implement the latest version in dependencies.\nStep 1. Add to repositories allprojects { repositories { mavenCentral() } } Step 2. Add in dependencies dependencies { implementation \u0026#39;com.siddroid:holi:$latest_version\u0026#39; } Source  PatilSiddhesh/Holi  Licensing MIT License Copyright (c) 2021 Siddhesh Patil, Siddroid.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, andor sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Disclaimer Holi uses color palettes from the reference sites, these colors / swatches are free to use. A big thanks to the maintainers for making these color palettes.\n","href":"https://siddroid.com/post/projects/holi-a-library-of-colors-for-jetpack-compose/","title":"Holi: A library of colors, gradients and utils for Jetpack Compose"},{"browse":"Community","content":"   link   Event Details We\u0026rsquo;re going fully online into 2021 as a community our last meetup was a global collaboration of communities with Android Worldwide. To kickstart things in the Kotlin Universe Kotlin Mumbai organized a meetup with Sebastian Aigner from Jetbrains to discuss their future plans with Kotlin/JS.\n Speaker: Sebastian Aigner, DevRel team at Jetbrains Date: 6th March 2021 Location: Online  Here\u0026rsquo;s a few words from Sebastian before you watch the session: Let’s talk about how we can use Kotlin to leverage one of the most exciting platforms of the last decade: the browser. We’ll see what it takes to get started with writing Kotlin/JS applications, and get a feeling for the ecosystem, including libraries specific to Kotlin/JS, but also multiplatform. We’ll also talk about news and plans the team at Jetbrains has to make the JavaScript target for Kotlin even better in the future. Let’s explore together!\n Video    Questions from the community  Answers are directly time stamped in the Youtube video\n  Can I start Web Dev directly with Kotlin JS or go with JS+React then return to Kotlin being an Android Developer Are there any plans to support JetBrains Compose UI development toolkit with Kotlin JS for web development? Is it possible to generate source maps for Kotlin JS Code to possibly make it easier to develop? Can we make a cross-platform App with Kotlin which runs on the web and also on ios and Android? How does Kotlin/JS compare to another multi-platform framework like flutter web? Does Kotlin/JS in a multiplatform app(full stack) support raw CSS files or we have to use Kotlin CSS DSL itself? Are there any limitations when targeting JS on the usage of Kotlin\u0026rsquo;s language features either as a part of the std library or coroutines? For eg like using flows. Any plans for Vue.js with Kotlin JS? Does this custom DSL for HTML use PSI files under the hood to generate the HTML files? or is it done differently? Is RClass specific to React components only? How does it work under the hood? Does it translate code to JS just like TypeScript does? How does Jetbrains ensure that with every release of Kotlin the functionality and compiler support for each platform remains consistent? Is Kotlin/JS stable and confident enough to make a simple frontend website? Are the website made with Kotlin/Js responsive? How will be the performance on different browsers like chrome, safari, etc? Any recommended documentation or quick snippets of code where I can easily learn about the basic components? (no libraries) How can I add an npm module whose only method returns a Promise. I haven\u0026rsquo;t been able to compile it. And all I find on docs is capitalize or camel case example. Can I host the website made in Kotlin/Js on Firebase, Netlify, etc? Are there any example GitHub projects showcasing a website or any webpage using kotlin JS and a backend? Kotlin over javascript sounds like a good payoff but kotlin over typescript doesn\u0026rsquo;t sound all that good right? Does Kotlin/js support different levels of style encapsulation like style that applies only to a particular component / some CSS specifically to the whole app? How to use styled-components? can you give any reference for that? Which is better in terms of performance react js or kotlin/js? How easy it is to make use of hardware-acceleration, maybe a GPU I have while using TensorFlow.JS?  Wrapping it up One of the most interesting meetups we have hosted, our community asked a lot of interesting questions, you can listen to Sebastian answer them in the video directly. Our organizing member Rishit Dagli did a fine job at adding timestamps in the YouTube video to make things easier for you.\n","href":"https://siddroid.com/post/post-diving-into-kotlin-js-sebastian-aigner-siddhesh-patil/","title":"Dive into Kotlin/JS with Sebastian Aigner"},{"browse":"Community","content":"  Event Details I. Be the flow in a reactive world Himanshu Singh and Niharika Arora, Google Developer experts for Android talk about reactive programming and how Kotlin flows can help solve some problems with reactive programming.\nWatch the session here\n    II. Journey of Time Subhrajyoti Sen takes us through the calendar class in Java and how Joda Time makes things better.\nWatch this session here\n    This was our first global collaborative effort with other communities, thanks to Android Worldwide we have have talks like these in various timezones. Many thanks to Shalom Halbert who came up with such an initiative!\n","href":"https://siddroid.com/post/post-joda-time-kotlin-flows-android-worldwide-2021/","title":"Kotlin Mumbai x Android Worldwide"},{"browse":"Community","content":"  Event Details  Speaker: Gurupreet Singh , Android Developer at Foodpanda Location: Online, Microsoft Teams   Exploring the future of Android UI with Jetpack Compose Compose is a new declarative way of making user interfaces on Android. It is changing the way app developers are designing and organizing their view related code. It\u0026rsquo;s certainly a breath of fresh air from what Android does with XMLs. In this talk Gurupreet explores the use cases of Jetpack compose and educates us on how one can quickly bootstrap a project with compose.\n Video    This was the last meetup of 2020 that we organized at Kotlin Mumbai, and it was amazing! We can\u0026rsquo;t wait to bring more talks and interesting conversations to you next year. Till then happy new year 2021 and stay tuned for more!\n ","href":"https://siddroid.com/post/post-exploring-future-of-android-with-jetpack-compose-siddhesh-patil/","title":"Kotlin Mumbai: Exploring Future of Android UI With Jetpack Compose"},{"browse":"Community","content":"   Event Details  Speaker: Mohit Sarveiya ,Google Developer Expert for Kotlin Date: 28th November 2020 Location: Online   Dissecting Coroutines The coroutines library contains many features for starting coroutines, creating Flows and Channels, and handling a mutable shared state. But, how do we use them, how do they work and what are good use cases?\nIn this talk, we will explore basic to advanced features provided by the coroutines library. We\u0026rsquo;ll look at when to use state flow, shared flow, and every type of Channel. We\u0026rsquo;ll explore lesser-known features and their use cases such as selectors and actors. Did you know combining Flows uses selectors under the hood? What are they? Mohit will share his learnings from his extensive experience in using these constructs!\n Slides   Video    That\u0026rsquo;s been it for our November meetup! It was quite interesting to understand how channels and flows work. We concluded the meetup with a Q\u0026amp;A round.\n ","href":"https://siddroid.com/post/post-dissecting-coroutines-kotlin-mumbai-nov-2020-siddhesh-patil-siddroid/","title":"Kotlin Mumbai: Dissecting Coroutines"},{"browse":"Talks","content":"  Using ZSH and OHMYZSH and Command line aliases Workflows can get tedious, often at times you\u0026rsquo;ll find yourself switching between tools to accomplish your tasks. Any Android developer would be familiar with the vicious cycle that is coding, executing, commiting, pushing your changes, raising your PRs! Many a times switching branches, forking new ones and what not!\nMost of us are familiar with using Git and we have our choices of tools as well. Since the last two months, my workflows have been enjoyable and fast. Before using ZSH and command line aliases I would be resorting to tools like Sourcetree, Github GUI or the standard VCS provided in Android Studio.\nDuring a team meet I saw my CTO, Neehar at Paytm Insider use commands like \u0026ldquo;glog\u0026rdquo; \u0026ldquo;gs\u0026rdquo; etc while demonstrating a branching strategy. He went on to explain how command line aliases are making things easier for him. I was amazed, I had never thought about it. To my surprise many of my colleagues were already using ZSH or other shells with their own alias setups.\nIt made me think the amount of time I spend looking at these interfaces and switching between tools throughout the day to accomplish simple tasks.\nI setup ZSH along with OHMYZSH and made simple aliases for things like:\n switching between projects Basic git functionality like checking out branches, creating new ones, looking at statuses, reviewing logs in graph view etc creating bundles without accessing bundle tool directly  The amount of optimization you can do with your workflow is completely upto you. If you find yourself using a commandline utility a lot of times, make an alias for it!\nSetting up ZSH with OHMYZSH Setting up ZSH with OHMYZSH is super easy\nZSH can be setup via brew\nbrew install zsh OHMYZSH installation guide you can find in their Github readme.\nSetting aliases Do the alias setup once you install OHMYZSH. To setup aliases you\u0026rsquo;ll have to find .zshrc file in your user\u0026rsquo;s root. To access this on mac just use:\nCMD + Shift + H To access your user root in finder. Then\nCMD + Shift + . To access your hidden files\nEdit your .zshrc file, there are sample aliases in the default file.\nEvent details This event was a cross colaboration between various communities in India like Google Developer Group Mumbai, Tensorflow User group Mumbai, Flutter Mumbai and Kotlin Mumbai of course!\nI went on to talk about commandline aliases and another co-organizer of Kotlin Mumbai, Chintan Parmar talked about contributing to Kotlin based projects during Hacktoberfest.\nPost the talk we had a productive discussion between communities about open-source contributions.\nYou can view the slides here:\n ","href":"https://siddroid.com/post/post-hacktoberfest-kotlin-mumbai-git-alias-zsh-siddhesh-patil/","title":"Hacktoberfest: Speed up your workflows with ZSH and command line aliases!"},{"browse":"Community","content":"   Event Details  Speaker: Wajahat Karim, GDE for Android \u0026amp; Carlos Mota, Organizer of GDG Coimbra Date: 26th September 2020 Location: Online   Scoped Storage on Android Scoped storage is still a sensitive subject to most of us due to the impact it had on most apps, but the most needed one! Scoped storage is one of the most important security features that has been released that empowers the user to have the final word when an app is accessing external files. In this talk, Carlos Mota is also going to share the dos and don’ts about these developments and how everything will get better at the end.\n Building a game with Jetpack Compose Although Jetpack Compose is a toolkit to create Android UI in a declarative form with the power of Kotlin language. But it can be used as a canvas for generative art, animations, or even games. In this session, we\u0026rsquo;ll take a look at the capabilities of Canvas API for Jetpack Compose and how can we implement Chrome\u0026rsquo;s T-Rex Dino game. Wajahat Karim will discuss some challenges such as game loop, game state management, infinite parallax scrolling etc. By the end of this talk, you\u0026rsquo;ll be more familiar with the concepts of Canvas in Jetpack Compose and how you can use it for games.\nWatch the entire talk on YouTube!\n   ","href":"https://siddroid.com/post/post-kotlin-mumbai-jetpack-compose-scoped-storage-on-android-2020-siddhesh-patil/","title":"Build a game with Jetpack Compose and Keep up with scoped storage on Android"},{"browse":"Community","content":"   Event Details  Speaker: Subhrajyoti Sen, Android Developer from smallcase Date: 22nd August 2020 Location: Online   Description Lint is a powerful static analysis tool that can be used to enforce coding styles and also find common bugs across a codebase. Google provides a bunch of lint checks by default for Android. On popular demand, the Lint API was extended to support non-Android Kotlin projects too.\nIn this talk, Subhrajyoti discusses some examples of custom lint checks we use on the Tickertape app to enforce out design guidelines. He will go through the source code of Android lint checking and then show how to write a custom lint rule.\nThis talk also demonstrates how to write test cases for the rules. By the end of the talk, you will be able to understand how lint works and how you can add custom lint rules to your projects.\nMissed the session? No problem! Watch the entire talk on YouTube!\n   ","href":"https://siddroid.com/post/post-august-kotlin-mumbai-2020-siddhesh-patil/","title":"Kotlin Mumbai: Building a better codebase with Lint on Android"},{"browse":"Updates","content":"   Details Publication: Times of India\nDate: 19th August 2020\nMisc: Pages 6-7, under Times Techies (currently available in Bangalore and Hyderabad editions only)\nAcknowledgements: Editorial team at Times Group, Habeeba Salim and Sujit John, Kotlinlang and Jetbrains team for enabling developers around the world with their active community support.\nRead the publication here on TOI website\n One Pager   ","href":"https://siddroid.com/post/post-siddhesh-patil-times-of-india-kotlin/","title":"How Kotlin won the language war in Android App Development"},{"browse":"Talks","content":"   Talk details Title: Building apps for Android in Kotlin\nDate: 8th August 2020\nPlatform: Google Meet\nInstitute: Vivekanand Education Society\u0026rsquo;s Institute of Technology\nLocation: Online\nAttendees: 170 + Students from Department of Computer Engineering\nPatrons: Dr.(Mrs). Nupur Giri, Head of department, Computer Engineering\nFrom Codecell: Mr. Prashant Kanade, Mr. Richard Joseph\nCoordinators: Mr.SujitKumar Singh, Ms.Tina Chandwani, Mr.Amit Chhabria, Mr.Rohan Gosalkar, Mr.Arnav Bagchi, Mr.Kunal Kotkar, Mr.Sanket Jangle, Mr.Sahil Rajpal\nHon: Shri. B.L. Boolani (President VES), Dr.(Mrs) J.M. Nair (Principal), Dr.(Mrs) M. Vijayalakshmi (Vice Principal)\n Abstract With a day one session on introduction to Kotlin the students are prepared to explore the world of Android Development. This talk is a live workshop where students build a small app for Android using Android Studio and Kotlin.\n Coverage  Overview of modern day apps Lists are important! What we are building today? App Architecture Views and Activities Preparing the data using lists and data class Views and XML editor in Android Studio Working with Gradle Code, Split and Design section in Studio 4.0 Building Views and UI Android X and Jetpack libraries Developer resources from official Android Developers references Recycler Views and ViewHolders Running an app, using logcat to debug   Slidedeck   Results Concluding the two-day workshop and talks, students were able to build their very first app using Kotlin. We explored how to work with Android Studio and learnt the basic building blocks of an Android app. The institute distributed certificates of participation to the students who attended.\n Acknowledgements I was honored to be welcomed at a prestigious institute like VESIT to speak and teach the students. This would not have been possible without the efforts of the team at CodeCell who organized the session. Special thanks to Mr.Sujitkumar Singh who was patient enough to follow this through over the last six months since February 2020 for planning this event. My humble thanks and gratitude to the faculty at VESIT and to the students who participated in the session. Talks and workshops like these enable and empower students with the right direction to their path on becoming tomorrow\u0026rsquo;s successful app developers!\n","href":"https://siddroid.com/post/talk-building-apps-for-android-in-kotlin-vesit-cmpn-siddhesh-patil/","title":"VESIT: Building Apps For Android in Kotlin"},{"browse":"Talks","content":"   Talk details Title: Getting Started With Kotlin\nDate: 7th August 2020\nPlatform: Google Meet\nInstitute: Vivekanand Education Society\u0026rsquo;s Institute of Technology\nLocation: Online\nAttendees: 170 + Students from Department of Computer Engineering\nPatrons: Dr.(Mrs). Nupur Giri, Head of department, Computer Engineering\nFrom Codecell: Mr. Prashant Kanade, Mr. Richard Joseph\nCoordinators: Mr.SujitKumar Singh, Ms.Tina Chandwani, Mr.Amit Chhabria, Mr.Rohan Gosalkar, Mr.Arnav Bagchi, Mr.Kunal Kotkar, Mr.Sanket Jangle, Mr.Sahil Rajpal\nHon: Shri. B.L. Boolani (President VES), Dr.(Mrs) J.M. Nair (Principal), Dr.(Mrs) M. Vijayalakshmi (Vice Principal)\n Abstract Kotlin empowers Android apps and enables developers to express themselves freely than any other object-oriented programming language. This introductory talk as a part of a two-day program aims to cover the basics of Kotlin.\n Coverage  Brush-up on Object-Oriented Programing Evolution of OOP Why Kotlin What is Kotlin Facts about Kotlin Interoperability \u0026amp; Tools used val and var declarations Type inference Type casting Functions in Kotlin Nullability and Null-safety Data classes and Primitive types Lists \u0026amp; Arrays if statements and flow control for loop and iteration Classes   Slidedeck   Acknowledgements A big thanks to every student who attended this session. Thanks to Mr. Richard Joseph who was kind enough to introduce me to the students and faculty. This talk went wonderfully and students who never knew Kotlin were able to grasp the concepts easily. We had a small Q\u0026amp;A at the end of day one. With this introductory session on Kotlin the students are now prepared to build their very first Android app!\n","href":"https://siddroid.com/post/talk-getting-started-with-kotlin-vesit-cmpn-siddhesh-patil/","title":"VESIT: Getting Started With Kotlin"},{"browse":"Talks","content":"   Talk details Title: Introduction to Kotlin\nPlatform: Youtube live stream\nCommunity: Kotlin Hyderabad\nLocation: Online\nAttendees: 38\nOrganizers: Rajmahendra \u0026amp; Chaitanya\nMeetup Link\nListing on Kotlinlang.org\n Abstract Kotlin is the preferred language for Android Development. With over 2 billion active users, Kotlin enables many developers to deliver software worldwide on Android. With growing number of users migrating to Kotlin, this session aims to cover basics of Kotlin and programming. The talk is intended for beginner level audience and for new comers who want to learn Kotlin.\n Coverage  Why Kotlin What is Kotlin Facts about Kotlin Interoperability \u0026amp; Tools used val and var declarations Type inference Type casting Functions in Kotlin Nullability and Null-safety Data classes and Primitive types Lists \u0026amp; Arrays if statements and flow control for loop and iteration Classes and interfaces   Slidedeck   Video    Thoughts This was my first talk on Kotlin, hope this was helpful to everyone. I\u0026rsquo;ll be doing more talks like these. Feel free to drop a comment or connect with me on other platforms!\n","href":"https://siddroid.com/post/talk-introduction-to-kotlin-siddhesh-patil-kotlin-hyderabad/","title":"Kotlin Hyderabad: Introduction to Kotlin"},{"browse":"Community","content":"   Making your app accessible for everyone is more than a “nice thing to do” It also increases the quality of your app. Products that keep accessibility in mind are more flexible and easier to use. It’s up to us to direct this step. In this talk, you’ll learn about some of the things you can do to make your app more accessible, and how it makes your product stronger. You’ll walk away with the tools you need to detect accessibility issues, increase the usability of your app, and prevent regressions.\n  Event Details  Speaker: Victoria Gonda, Senior Android Engineer at Meetup Date: 25th July 2020 Location: Online   Proceedings We started at 2:00 PM, a community introduction was done followed by an introduction of our speaker, Victoria. Accessibility is an important topic and often gets overlooked when product features are developed and UX systems are formulated. Victoria walks us through what are some of the best techniques you can follow to make your app more accessible. She asks our audience to head over to menti.com to form a word cloud around the topic. We go through some of the cases in mobile development where accessibility can be improved. She demonstrates how a good tool to find issues with accessibility is the accessibility scanner and how simple tools like these can be used to improve the overall quality of your application.\nMissed the session? No problem! Watch the entire talk on YouTube!\n   ","href":"https://siddroid.com/post/post-july-kotlin-mumbai-2020/","title":"Kotlin Mumbai: Increase Your Product Quality Through Accessibility"},{"browse":"Community","content":"  It\u0026rsquo;s July 11th and Android 11 is just around the corner! Jumping on to the bandwagon of Android 11 meetups by Google, Kotlin Mumbai and GDG MAD co-organized their first event together.\n Event Details: Series: Android 11 Meetups with Google\nSpeakers: Amrit Sanjeev and Saurabh Arora\nPlatform: Online on Google Meet\nTalk 1: What\u0026rsquo;s new in Android 11?\nTalk 2: Adapting your apps for privacy changes in Android 11\nCommunities: GDG MAD \u0026amp; Kotlin Mumbai\n What\u0026rsquo;s new in Android 11  Amrit Sanjeev, Staff Developer Advocate at Google walks us through what\u0026rsquo;s new in Android 11, including message bubbles and priority conversations, redesigned notifications, new media controls, behaviour changes and privacy features.\nTo know in detail about what\u0026rsquo;s new in Android 11 head over to the official feature list.\n Adapting your apps for privacy changes in Android 11  Saurabh Arora, Google Developer Expert for Android further talks on privacy changes in Android 11 and how to adapt existing apps to these new changes. Scoped storage enforcement, one time permissions, permission auto resseting, background location access and new foreground service types are covered in detail.\nTo know more about privacy changes refer to the official developer post here.\n We had a lot of fun co-organizing this event for everyone. Concluding the event we gave away full one year subscriptions for any Jetbrains IDE of choice to the audiences who answered some interesting questions about Android 11. Checkout upcoming Android 11 meetups here in case you want to attend them.\nRecap Watch the speaker sessions here   Thanks for joining and I hope to see everyone at our next meetup on 25th!\n","href":"https://siddroid.com/post/post-android-11-meetup-gdg-mad-kotlin-mumbai-siddhesh-patil/","title":"Android 11 Meetup: GDG MAD and Kotlin Mumbai"},{"browse":"Community","content":" Senior Android Engineer at BYJU\u0026rsquo;s, Rivu Chakraborty gives a talk on test driven development using Spek\nEvent details Speaker: Rivu Chakraborty, BYJUs, Senior Android Engineer\nTalk: TDD using Spek\nDate: June 23rd, 2020\nLocation: Virtual\nIn case you missed it   What we covered Rivu walks us through how to do TDD (Test driven development) on repositories and viewmodels in Android. He uses Spek to demonstrate live how test driven development is done. The live demo lasted for over an hour.\nThat\u0026rsquo;s all folks! Stay tuned for more we have exciting meetups in plan for July.\n","href":"https://siddroid.com/post/post-june-kotlin-mumbai-2020/","title":"Kotlin Mumbai: TDD using Spek"},{"browse":"Community","content":" Nicola Corti from Spotify walks us through Github actions! It\u0026rsquo;s time to roll up your sleeves and make production easier!\nEvent details Speaker: Nicola Corti, Spotify, Android Infrastructure Engineer\nTalk: Devops-ify your life using Github Actions!\nDate: May 23rd, 2020\nLocation: Virtual\nIn case you missed it   What we covered Using Github actions to setup tasks for auto build, test, deploy and upload. Our community covered a wide variety of questions like artifact uploading, signing of releases and how Github Actions is different than a traditional Jenkins setup.\nWe had so much fun! Nicola took out time for the community and woke up early in the morning to match the Indian time zone. We organizers had a long 2 hour discussion with Nicola post the meetup where we discussed many topics on Android at depth.\nWhat\u0026rsquo;s more? We\u0026rsquo;re happy to announce many new meetups in the upcoming months! Stay Tuned!\n","href":"https://siddroid.com/post/post-may-kotlin-mumbai-2020/","title":"Kotlin Mumbai: Github Actions!"},{"browse":"Community","content":" Introductions \u0026amp; Introductions We recently organized our April meetup at Kotlin Mumbai. Before we deep dive into the proceedings and recap the sessions here are a few stats for you:\nDetails   Location: Online Platform: Google Meet Attendee count: 50-60 Speakers: Filip Babić and Akshay Chordiya, Google developer experts on Android   Before we announced the speakers for the session, we posted about a guessing game on Twitter. The person who successfully guesses the two speakers for the event gets a full one year subscription to Jetbrain\u0026rsquo;s IDEs. The only hint that our members had was that the speakers are a part of the GDE program. Only one or two members from the community were able to guess the right speaker.\nWe decided that this meetup will happen on Google Meet taking inspiration from other communities like GDG MAD. Thanks to Paytm Insider for the meet setup as free Gsuite accounts only allow 25 participants at a time.\nLet\u0026rsquo;s talk about our sessions!\nIntroduction to Kotlin  Our first speaker Filip Babić takes us through the basics of kotlin. Syntax, ease of use, differences with Java, need for the language, safe calls, nullability and type inferencing are covered. This talk was aimed for our new members who are new to app development and want to get started with Kotlin. Kotlin, being the easiest of programming languages to learn is the preferred language for app development.\nCheck out the session on YouTube:\n  Go with the Kotlin Flow  Asynchronous programming is made super easy with Kotlin Flows. Flows being a part of coroutines are new hot thing in the game. Akshay Chordiya guides us through the new way to do async with Kotlin. I personally can\u0026rsquo;t wait to try flows in production once the releases are stable. Overall Flows look promising enough replacement for RX.\nCheck out the session on YouTube with the Q\u0026amp;A:\n  After thoughts Overall the sessions went well, people from around the world and not just Mumbai came to join us, which was amazing! This was our first meetup hosting a developer expert at the community, not just one but two of them. Our attendees were quite happy and excited. We received positive feedback about the talks and our community.\nIt\u0026rsquo;s almost end of April! What started as a community of tens has now over 400+ members on meetup and we are growing. We have bigger plans in May and I hope to see you guys in the next meetup. Stay tuned!\n","href":"https://siddroid.com/post/post-april-kotlin-mumbai-2020/","title":"Kotlin Mumbai: Kotlin basics and Flows"},{"browse":"Community","content":" With the current situation and lockdowns due to coronavirus, we had to roll up our sleeves and prepare for a fully online meetup.\nI have recently joined Kotlin Mumbai User Group as an organizer, a community which a part of Jetbrains communities around the globe promoting the use of Kotlin programming language.\nOur preparations for the march meetup began pretty early on and we were scheduled to host the event in the Andheri east. Little did we know that the situation was about to get worse and the entire country will be in a state of lockdown.\nA lot of talks, conferences and meetups were getting cancelled. This would have been my first year going to Droidcon India. Attending Droidcon had always been a dream, I was fully prepared but the situation would not allow it. A closed workshop which I was going to deliver to engineering students also got postponed. Hopefully in due course of time as the situation improves, a lot would be possible again (Hopefully).\nWe had to take this meetup fully online, which would be a first for all of us organizers, Subhi Pandey, Rishit Dagli and me. After hours of research and multiple team calls we decided to go with a guide posted by GDG Lisbon in the GDG Europe publication.\nHow to origanize a full remote workshop - GDG Lisbon\n Things that helped\n OBS: Open Broadcaster Software, it\u0026rsquo;s a free tool available for all platforms. Youtube livestream. Google Meet. Telegram: For communicating online with our speakers while the sessions proceeded.   How did it go?\nWe started at 10:00AM on 21st March. After about five minutes we realized that the live stream had not started, after a couple of tweaks and checks we were able to get that running in no time.\nSubhi started the session with introduction to the Kotlin Mumbai community, other organizers introduced themselves. This was my first participation in the community as an attendee and an organizer.\nWe had three speakers of which one was not able to present due to some issues, the ones that presented were:\n  Kedarnath Naik - Dagger 2 Dependency Injection. Kedarnath walked us through the usage of dependency injection, manual injection and how one can benefit from using DI for projects.      Akshay Sawant - Jetpack navigation component. Inspired by Don Felker Akshay started his Android Development career, He demonstrated the use case of jetpack component and how navigation can be made easy in Android development.     The audiences would ask questions on Youtube live chat and were answered by our speakers at the end of the session.\nOverall this was a great start amid troubled times. We were happy the session went well. Can\u0026rsquo;t wait to do our next meetup in April. We have some great speakers talking in the upcoming one, stay tuned for more and follow us on Twitter for updates.\n","href":"https://siddroid.com/post/post-march-kotlin-mumbai-2020/","title":"Kotlin Mumbai: Dagger and Jetpack Navigation"},{"browse":"Android","content":"Permissions request dialogs are a vital part of user’s experience on the app. When a user installs an application for the first time they may or may not be clear of what the app does and why the app requires a certain set of permissions for its functionality.\nMany applications show a permission request dialog and a user can choose to grant or deny a permission. Often a user may deny a certain permission which may be required for the core functionality of the app.\nWell, why are permission rationale dialog important?\n They offer the user a clear explanation on why the permission is required which may have been unclear previously when the user had denied the permission.\n In this article we’ll cover how to handle cases where a user has previously denied a permission and present them with a rationale or a reason on why the user should grant the permission by using best practices and taking advantage of shouldShowRequestPermissionRationale. Let’s get started!\nIn this example we’ll be making a simple app in Kotlin which requests permissions and presents the user with a rationale for granting a denied permission. We’ll take a case where the app requires READ_CONTACTS permission from the user.\nStep 1: Define the permission in the Manifest\n AndroidManifest.xml\n \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34;/\u0026gt;\nStep 2: Define a function that checks for the permission\nprivate fun checkContactsPermission() { if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED ) { // Check if permission is not granted  Log.d(TAG, \u0026#34;Permission for contacts is not granted\u0026#34;) // This condition only becomes true if the user has denied the permission previously  if (shouldShowRequestPermissionRationale(android.Manifest.permission.READ_CONTACTS)) { showRationaleDialog(getString(R.string.rationale_title), getString(R.string.rationale_desc), android.Manifest.permission.READ_CONTACTS, REQUEST_CONTACTS_STATE) } else { // Perform a permission check  Log.d(TAG, \u0026#34;Checking permission\u0026#34;) requestPermissions(arrayOf(android.Manifest.permission.READ_CONTACTS),REQUEST_CONTACTS_STATE) } } else { // Permission is already granted, do your magic here!  } } Here the code will perform a check if the read contacts permission is granted or not. The following cases will occur:\n First time user who is opening the app will be presented with a standard request permission dialog. A user who has denied the permission previously will be presented with a rationale dialog. User has granted the permission.  Step 3: Define your function for showing a rationale dialog\nWe can acheive this with an AlertDialog as shown in the below function\nprivate fun showRationaleDialog(title: String, message: String, permission: String, requestCode: Int) { val builder: AlertDialog.Builder = AlertDialog.Builder(this) builder.setTitle(title) .setMessage(message) .setPositiveButton(\u0026#34;Ok\u0026#34;, { dialog, which -\u0026gt; requestPermissions(arrayOf(permission), requestCode) }) builder.create().show() } We’ll also add strings for the dialog. In this example our sample app needs read contacts permission for suggesting connections or people the user may know.\n strings.xml\n \u0026lt;string name=\u0026#34;rationale_title\u0026#34;\u0026gt;We need permission to read your contacts\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;rationale_desc\u0026#34;\u0026gt;This app relies on read access to your contacts. We require access to this permission to find your contacts in our database and suggest people you may know. We will not store any contact info in our data base if they are not a part of our platform. For further info read our privacy policy.\u0026lt;/string\u0026gt;\nStep 4: Let’s handle the permission results\nWe’ll display a Toast message once permission has been granted or denied by overriding onPermissionResults()\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array\u0026lt;out String\u0026gt;, grantResults:IntArray) { when (requestCode) { REQUEST_CONTACTS_STATE -\u0026gt; { if (grantResults.isNotEmpty() \u0026amp;\u0026amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) { Toast.makeText(this, \u0026#34;Permission granted\u0026#34;, Toast.LENGTH_SHORT).show() } else { Toast.makeText(this, \u0026#34;Permission denied\u0026#34;, Toast.LENGTH_SHORT).show() } } } } All Done! Let’s see how this works\n   User denies the permission Rational dialog on next open          The user now sees a rationale dialog since the permission was previously denied and shouldShowRequestPermissionRationale for the given permission has now become true.\nOnce the user taps on the positive button, the app will request permissions again. Hopefully this time you have convinced your user on why the permission is required.\nHere is a Github link for the above project as a sample for your reference.\n PatilSiddhesh/android-permission-rationale  Cheers! We have successfully implemented rationale dialogs for permissions by following best practices.\n","href":"https://siddroid.com/post/post-android-rationale-permission-dialogs-2020/","title":"Better permissions on Android"}]